; Package uid -> name
(0 primitives)
(1 scheme-primitives)
(2 low-level)
(3 scheme-level-1)
(4 signals)
(5 generics)
(6 number-i/o)
(7 record)
(8 bummed-define-record-types)
(9 fluids)
(10 wind)
(11 port)
(12 enumerated)
(13 architecture)
(14 condition)
(15 template)
(16 continuation)
(17 exception)
(18 interrupts)
(19 writing)
(20 reading)
(21 scheme-level-2)
(22 scheme-level-2-internal)
(23 shadowing)
(24 weak)
(25 table)
(26 filenames)
(27 syntactic)
(28 usual-macros)
(29 packages)
(30 scan)
(31 compiler)
(32 environments)
(33 display-conditions)
(34 defpackage)
(35 inline)
(36 for-reification)
(37 evaluation)
(38 scheme)
(39 ensures-loaded)
(40 mini-command)
(41 initial-system)
-
; Location uid -> (name . package)
(0 (closure-template . 0))
(1 (continuation-ref . 0))
(2 (output-port? . 0))
(3 (closure? . 0))
(4 (complex? . 0))
(5 (arithmetic-shift . 0))
(6 (signal-condition . 0))
(7 (integer? . 0))
(8 (make-closure . 0))
(9 (template-ref . 0))
(10 (make-rectangular . 0))
(11 (string=? . 0))
(12 (extended-number? . 0))
(13 (reverse-list->string . 0))
(14 (denominator . 0))
(15 (call-with-values . 0))
(16 (weak-pointer-ref . 0))
(17 (find-all-symbols . 0))
(18 (code-vector? . 0))
(19 (exp . 0))
(20 (sin . 0))
(21 (make-extended-number . 0))
(22 (cos . 0))
(23 (collect . 0))
(24 (external-lookup . 0))
(25 (tan . 0))
(26 (log . 0))
(27 (continuation-length . 0))
(28 (make-code-vector . 0))
(29 (cdr . 0))
(30 (bitwise-xor . 0))
(31 (car . 0))
(32 (string? . 0))
(33 (symbol? . 0))
(34 (set-cdr! . 0))
(35 (bitwise-not . 0))
(36 (vector? . 0))
(37 (closure-env . 0))
(38 (set-car! . 0))
(39 (bitwise-ior . 0))
(40 (number? . 0))
(41 (template-length . 0))
(42 (string-hash . 0))
(43 (primitive-catch . 0))
(44 (make-string . 0))
(45 (input-port? . 0))
(46 (record? . 0))
(47 (make-vector . 0))
(48 (extended-number-set! . 0))
(49 (write-image . 0))
(50 (eq? . 0))
(51 (bitwise-and . 0))
(52 (location-id . 0))
(53 (code-vector-set! . 0))
(54 (make-record . 0))
(55 (intern . 0))
(56 (values . 0))
(57 (unassigned . 0))
(58 (string-set! . 0))
(59 (vector-set! . 0))
(60 (extended-number-ref . 0))
(61 (unspecific . 0))
(62 (schedule-interrupt . 0))
(63 (code-vector-ref . 0))
(64 (find-all-xs . 0))
(65 (char-ready? . 0))
(66 (set-interrupt-handlers! . 0))
(67 (eof-object? . 0))
(68 (record-set! . 0))
(69 (ascii->char . 0))
(70 (char->ascii . 0))
(71 (set-enabled-interrupts! . 0))
(72 (external-value . 0))
(73 (make-immutable! . 0))
(74 (close-port . 0))
(75 (string-ref . 0))
(76 (immutable? . 0))
(77 (vector-ref . 0))
(78 (exact? . 0))
(79 (write-char . 0))
(80 (symbol->string . 0))
(81 (record-ref . 0))
(82 (make-polar . 0))
(83 (numerator . 0))
(84 (extended-number-length . 0))
(85 (error . 0))
(86 (exact->inexact . 0))
(87 (inexact->exact . 0))
(88 (memory-status . 0))
(89 (apply . 0))
(90 (code-vector-length . 0))
(91 (floor . 0))
(92 (with-continuation . 0))
(93 (magnitude . 0))
(94 (char=? . 0))
(95 (char<? . 0))
(96 (continuation? . 0))
(97 (remainder . 0))
(98 (vm-return . 0))
(99 (false . 0))
(100 (angle . 0))
(101 (open-port . 0))
(102 (string-length . 0))
(103 (external? . 0))
(104 (make-continuation . 0))
(105 (vector-length . 0))
(106 (template? . 0))
(107 (rational? . 0))
(108 (location? . 0))
(109 (external-name . 0))
(110 (set-exception-handler! . 0))
(111 (pair? . 0))
(112 (record-length . 0))
(113 (make-external . 0))
(114 (external-call . 0))
(115 (set-dynamic-state! . 0))
(116 (real-part . 0))
(117 (real? . 0))
(118 (make-template . 0))
(119 (imag-part . 0))
(120 (make-location . 0))
(121 (= . 0))
(122 (< . 0))
(123 (char? . 0))
(124 (quotient . 0))
(125 (/ . 0))
(126 (weak-pointer? . 0))
(127 (- . 0))
(128 (continuation-set! . 0))
(129 (peek-char . 0))
(130 (+ . 0))
(131 (* . 0))
(132 (contents . 0))
(133 (sqrt . 0))
(134 (read-char . 0))
(135 (set-contents! . 0))
(136 (make-weak-pointer . 0))
(137 (get-dynamic-state . 0))
(138 (trap . 0))
(139 (cons . 0))
(140 (template-set! . 0))
(141 (time . 0))
(142 (location-defined? . 0))
(143 (asin . 0))
(144 (write-string . 0))
(145 (vm-extension . 0))
(146 (force-output . 0))
(147 (acos . 0))
(148 (set-location-defined?! . 0))
(149 (atan . 0))
(150 (char->integer . 2))
(151 (integer->char . 2))
(152 (ascii-limit . 2))
(153 (ascii-whitespaces . 2))
(154 (procedure? . 2))
(155 (invoke-closure . 2))
(156 (primitive-cwcc . 2))
(157 (make-undefined-location . 2))
(158 (location-assigned? . 2))
(159 (string-copy . 2))
(160 (string->symbol . 2))
(161 (really-string->symbol . 2))
(162 (*the-symbol-table* . 2))
(163 (flush-the-symbol-table! . 2))
(164 (restore-the-symbol-table! . 2))
(165 (maybe-open-input-file . 2))
(166 (maybe-open-output-file . 2))
(167 (open-input-file . 2))
(168 (open-output-file . 2))
(169 (close-input-port . 2))
(170 (close-output-port . 2))
(171 (halt . 2))
(172 (not . 3))
(173 (boolean? . 3))
(174 (eqv? . 3))
(175 (equal? . 3))
(176 (> . 3))
(177 (<= . 3))
(178 (>= . 3))
(179 (max . 3))
(180 (min . 3))
(181 (abs . 3))
(182 (zero? . 3))
(183 (positive? . 3))
(184 (negative? . 3))
(185 (even? . 3))
(186 (odd? . 3))
(187 (caar . 3))
(188 (cadr . 3))
(189 (cdar . 3))
(190 (cddr . 3))
(191 (caaar . 3))
(192 (caadr . 3))
(193 (cadar . 3))
(194 (caddr . 3))
(195 (cdaar . 3))
(196 (cdadr . 3))
(197 (cddar . 3))
(198 (cdddr . 3))
(199 (caaaar . 3))
(200 (caaadr . 3))
(201 (caadar . 3))
(202 (caaddr . 3))
(203 (cadaar . 3))
(204 (cadadr . 3))
(205 (caddar . 3))
(206 (cadddr . 3))
(207 (cdaaar . 3))
(208 (cdaadr . 3))
(209 (cdadar . 3))
(210 (cdaddr . 3))
(211 (cddaar . 3))
(212 (cddadr . 3))
(213 (cdddar . 3))
(214 (cddddr . 3))
(215 (null? . 3))
(216 (list . 3))
(217 (length . 3))
(218 (append . 3))
(219 (reverse . 3))
(220 (append-reverse . 3))
(221 (list-tail . 3))
(222 (list-ref . 3))
(223 (mem . 3))
(224 (memq . 3))
(225 (memv . 3))
(226 (member . 3))
(227 (ass . 3))
(228 (assv . 3))
(229 (assoc . 3))
(230 (assq . 3))
(231 (list? . 3))
(232 (char>? . 3))
(233 (char>=? . 3))
(234 (char<=? . 3))
(235 (char-whitespace? . 3))
(236 (char-lower-case? . 3))
(237 (char-upper-case? . 3))
(238 (char-numeric? . 3))
(239 (char-alphabetic? . 3))
(240 (char-case-delta . 3))
(241 (char-upcase . 3))
(242 (char-downcase . 3))
(243 (char-ci-compare . 3))
(244 (char-ci=? . 3))
(245 (char-ci<? . 3))
(246 (char-ci<=? . 3))
(247 (char-ci>? . 3))
(248 (char-ci>=? . 3))
(249 (string . 3))
(250 (substring . 3))
(251 (string-append . 3))
(252 (string->list . 3))
(253 (list->string . 3))
(254 (string-fill! . 3))
(255 (make-string=? . 3))
(256 (string-ci=? . 3))
(257 (make-string<? . 3))
(258 (string<? . 3))
(259 (string-ci<? . 3))
(260 (string>? . 3))
(261 (string<=? . 3))
(262 (string>=? . 3))
(263 (string-ci>? . 3))
(264 (string-ci<=? . 3))
(265 (string-ci>=? . 3))
(266 (vector . 3))
(267 (vector->list . 3))
(268 (list->vector . 3))
(269 (vector-fill! . 3))
(270 (map . 3))
(271 (map1 . 3))
(272 (map2+ . 3))
(273 (for-each . 3))
(274 (make-promise . 3))
(275 (force . 3))
(276 (reduce . 3))
(277 (filter . 3))
(278 (pos . 3))
(279 (posq . 3))
(280 (posv . 3))
(281 (position . 3))
(282 (any . 3))
(283 (every . 3))
(284 (sublist . 3))
(285 (inexact? . 3))
(286 (modulo . 3))
(287 (ceiling . 3))
(288 (truncate . 3))
(289 (round . 3))
(290 (gcd . 3))
(291 (euclid . 3))
(292 (lcm . 3))
(293 (expt . 3))
(294 (raise-to-integer-power . 3))
(295 (rationalize . 3))
(296 (simplest-rational . 3))
(297 (make-condition . 4))
(298 (signal . 4))
(299 (warn . 4))
(300 (syntax-error . 4))
(301 (call-error . 4))
(302 (make-family . 5))
(303 (family-identity . 5))
(304 (family-precedence . 5))
(305 (family-of-last-resort . 5))
(306 (default-family . 5))
(307 (same-family? . 5))
(308 (make-method-table . 5))
(309 (method-table-methods . 5))
(310 (method-table-families . 5))
(311 (define-method . 5))
(312 (define-default-method . 5))
(313 (define-last-method . 5))
(314 (make-generic . 5))
(315 (perform-dispatch . 5))
(316 (*fail* . 5))
(317 (fail . 5))
(318 (disclose-methods . 5))
(319 (disclose . 5))
(320 (make-generic-exception-handler . 5))
(321 (number->string-table . 6))
(322 (string->number-table . 6))
(323 (really-number->string . 6))
(324 (really-string->number . 6))
(325 (number->string . 6))
(326 (integer->string . 6))
(327 (string->number . 6))
(328 (string->integer . 6))
(329 (record-type . 7))
(330 (*record-type-uid* . 7))
(331 (record-type-marker . 7))
(332 (make-record-type . 7))
(333 (record-type? . 7))
(334 (record-type-uid . 7))
(335 (record-type-identification . 7))
(336 (record-type-field-names . 7))
(337 (record-type-discloser . 7))
(338 (record-field-index . 7))
(339 (record-constructor . 7))
(340 (record-accessor . 7))
(341 (record-modifier . 7))
(342 (record-predicate . 7))
(343 (define-record-discloser . 7))
(344 (disclose-record . 7))
(345 (default-record-discloser . 7))
(346 (thread-type . 9))
(347 (make-thread . 9))
(348 (thread-dynamic-env . 9))
(349 (current-thread . 9))
(350 (set-current-thread! . 9))
(351 (get-dynamic-env . 9))
(352 (set-dynamic-env! . 9))
(353 (initialize-dynamic-state! . 9))
(354 (with-dynamic-env . 9))
(355 (empty-dynamic-env . 9))
(356 (fluid-type . 9))
(357 (make-fluid . 9))
(358 (fluid-top-level-value . 9))
(359 (set-fluid-top-level-value! . 9))
(360 (fluid . 9))
(361 (set-fluid! . 9))
(362 (let-fluid . 9))
(363 (let-fluids . 9))
(364 (fluid-lookup . 9))
(365 (dynamic-wind . 10))
(366 (call-with-current-continuation . 10))
(367 (point-type . 10))
(368 (make-point . 10))
(369 (point-parent . 10))
(370 (point-dynamic-env . 10))
(371 (point-out . 10))
(372 (point-in . 10))
(373 (point-depth . 10))
(374 (root-point . 10))
(375 ($dynamic-point . 10))
(376 (get-dynamic-point . 10))
(377 (env-dynamic-point . 10))
(378 (let-dynamic-point . 10))
(379 (travel-to-point! . 10))
(380 ($current-input-port . 11))
(381 ($current-output-port . 11))
(382 ($error-output-port . 11))
(383 (current-input-port . 11))
(384 (current-output-port . 11))
(385 (error-output-port . 11))
(386 (with-initial-ports . 11))
(387 (call-with-mumble-file . 11))
(388 (call-with-input-file . 11))
(389 (call-with-output-file . 11))
(390 (with-input-from-file . 11))
(391 (with-output-to-file . 11))
(392 (newline . 11))
(393 (output-port-option . 11))
(394 (input-port-option . 11))
(395 (write . 19))
(396 (recurring-write . 19))
(397 (write-boolean . 19))
(398 (write-number . 19))
(399 (write-char-literal . 19))
(400 (character-name . 19))
(401 (write-string-literal . 19))
(402 (write-list . 19))
(403 (quotation? . 19))
(404 (write-vector . 19))
(405 (write-other . 19))
(406 (display-type-name . 19))
(407 (display . 19))
(408 (*condition-types* . 14))
(409 (condition-supertypes . 14))
(410 (define-condition-type . 14))
(411 (condition-predicate . 14))
(412 (condition? . 14))
(413 (condition-type . 14))
(414 (condition-stuff . 14))
(415 (error? . 14))
(416 (call-error? . 14))
(417 (read-error? . 14))
(418 (exception? . 14))
(419 (exception-opcode . 14))
(420 (exception-arguments . 14))
(421 (make-exception . 14))
(422 (warning? . 14))
(423 (syntax-error? . 14))
(424 (interrupt? . 14))
(425 (read . 20))
(426 (sub-read-carefully . 20))
(427 (reader-token-marker . 20))
(428 (make-reader-token . 20))
(429 (reader-token? . 20))
(430 (close-paren . 20))
(431 (dot . 20))
(432 (sub-read . 20))
(433 (read-dispatch-vector . 20))
(434 (read-terminating?-vector . 20))
(435 (set-standard-syntax! . 20))
(436 (set-standard-read-macro! . 20))
(437 (sub-read-list . 20))
(438 (gobble-line . 20))
(439 (*sharp-macros* . 20))
(440 (define-sharp-macro . 20))
(441 (sub-read-token . 20))
(442 (parse-token . 20))
(443 (strange-symbol-names . 20))
(444 (preferred-case . 20))
(445 (reading-error . 20))
(446 (table-type . 25))
(447 (really-make-table . 25))
(448 (table-set-procedure . 25))
(449 (set-table-set-procedure! . 25))
(450 (table-ref-procedure . 25))
(451 (set-table-ref-procedure! . 25))
(452 (table-data . 25))
(453 (set-table-data! . 25))
(454 (table-size . 25))
(455 (set-table-size! . 25))
(456 (table-hash-function . 25))
(457 (table? . 25))
(458 (make-table . 25))
(459 (table-ref . 25))
(460 (table-set! . 25))
(461 (linear-table-size-limit . 25))
(462 (table-size-limit . 25))
(463 (next-table-size . 25))
(464 (null-entry . 25))
(465 (new-entry . 25))
(466 (get-entry . 25))
(467 (set-entry! . 25))
(468 (for-each-entry . 25))
(469 (linear-table-ref . 25))
(470 (linear-table-set! . 25))
(471 (linear-table-inc! . 25))
(472 (table-expand-table! . 25))
(473 (table-enter-entries! . 25))
(474 (hash-table-ref . 25))
(475 (hash-table-set! . 25))
(476 (hash-table-inc! . 25))
(477 (table-walk . 25))
(478 (default-table-hash-function . 25))
(479 (syntax? . 27))
(480 (name? . 27))
(481 (unbound? . 27))
(482 (type/operator . 27))
(483 (make-operator . 27))
(484 (operator-uid-maybe . 27))
(485 (set-operator-uid-maybe! . 27))
(486 (operator-transform . 27))
(487 (set-operator-transform! . 27))
(488 (operator-name . 27))
(489 (operator-type . 27))
(490 (operator? . 27))
(491 (get-operator . 27))
(492 (operator-uid . 27))
(493 (*operator-uid* . 27))
(494 (operators-table . 27))
(495 (number-of-operators . 27))
(496 (make-compilator-table . 27))
(497 (type/transform . 27))
(498 (make-transform . 27))
(499 (transform-id . 27))
(500 (transform-source . 27))
(501 (transform-aux-names . 27))
(502 (transform-type . 27))
(503 (transform-env . 27))
(504 (transform-procedure . 27))
(505 (transform? . 27))
(506 (maybe-transform . 27))
(507 (transform . 27))
(508 (make-name-generator . 27))
(509 (same-denotation? . 27))
(510 (same-transform? . 27))
(511 (type/generated . 27))
(512 (make-generated . 27))
(513 (generated-pname . 27))
(514 (set-generated-pname! . 27))
(515 (generated-parent-name . 27))
(516 (generated-env . 27))
(517 (generated-symbol . 27))
(518 (generated? . 27))
(519 (generate-name . 27))
(520 (name->symbol . 27))
(521 (*generated-uid* . 27))
(522 (name-hash . 27))
(523 (desyntaxify . 27))
(524 (make-immutable . 27))
(525 (operator/define . 27))
(526 (operator/lambda . 27))
(527 (operator/unassigned . 27))
(528 (normalize-definition . 27))
(529 (make-define . 27))
(530 (define? . 27))
(531 (define-lhs . 27))
(532 (define-rhs . 27))
(533 (literal? . 27))
(534 (number-of-required-args . 27))
(535 (n-ary? . 27))
(536 (normalize-formals . 27))
(537 ($source-file-name . 27))
(538 (make-population . 24))
(539 (add-to-population! . 24))
(540 (population-reduce . 24))
(541 (population->list . 24))
(542 (walk-population . 24))
(543 (template-overhead . 15))
(544 (template-code . 15))
(545 (template-info . 15))
(546 (set-template-code! . 15))
(547 (set-template-info! . 15))
(548 (continuation-cont . 16))
(549 (continuation-pc . 16))
(550 (continuation-template . 16))
(551 (continuation-env . 16))
(552 (continuation-overhead . 16))
(553 (continuation-arg . 16))
(554 (continuation-arg-count . 16))
(555 (continuation-parent . 16))
(556 (enumerand->name . 12))
(557 (name->enumerand . 12))
(558 (definitely-name->enumerand . 12))
(559 (bits-used-per-byte . 13))
(560 (maximum-stack-args . 13))
(561 (op/intern . 13))
(562 (op/reverse-list->string . 13))
(563 (op/string-hash . 13))
(564 (op/string=? . 13))
(565 (op/vm-return . 13))
(566 (op/vm-extension . 13))
(567 (op/time . 13))
(568 (op/external-call . 13))
(569 (op/external-lookup . 13))
(570 (op/schedule-interrupt . 13))
(571 (op/return-from-interrupt . 13))
(572 (op/set-enabled-interrupts! . 13))
(573 (op/set-interrupt-handlers! . 13))
(574 (op/set-exception-handler! . 13))
(575 (op/set-dynamic-state! . 13))
(576 (op/get-dynamic-state . 13))
(577 (op/find-all-xs . 13))
(578 (op/find-all-symbols . 13))
(579 (op/memory-status . 13))
(580 (op/collect . 13))
(581 (op/write-image . 13))
(582 (op/false . 13))
(583 (op/trap . 13))
(584 (op/unspecific . 13))
(585 (op/unassigned . 13))
(586 (op/force-output . 13))
(587 (op/write-string . 13))
(588 (op/write-char . 13))
(589 (op/char-ready? . 13))
(590 (op/peek-char . 13))
(591 (op/read-char . 13))
(592 (op/output-port? . 13))
(593 (op/input-port? . 13))
(594 (op/close-port . 13))
(595 (op/open-port . 13))
(596 (op/make-immutable! . 13))
(597 (op/immutable? . 13))
(598 (op/set-location-defined?! . 13))
(599 (op/location-defined? . 13))
(600 (op/stored-object-indexed-char-set! . 13))
(601 (op/stored-object-indexed-byte-set! . 13))
(602 (op/stored-object-indexed-set! . 13))
(603 (op/stored-object-indexed-char-ref . 13))
(604 (op/stored-object-indexed-byte-ref . 13))
(605 (op/stored-object-indexed-ref . 13))
(606 (op/stored-object-set! . 13))
(607 (op/stored-object-ref . 13))
(608 (op/stored-object-byte-length . 13))
(609 (op/stored-object-length . 13))
(610 (op/stored-object-has-type? . 13))
(611 (op/make-char-vector-object . 13))
(612 (op/make-byte-vector-object . 13))
(613 (op/make-vector-object . 13))
(614 (op/make-stored-object . 13))
(615 (op/eof-object? . 13))
(616 (op/ascii->char . 13))
(617 (op/char->ascii . 13))
(618 (op/char<? . 13))
(619 (op/char=? . 13))
(620 (op/char? . 13))
(621 (op/arithmetic-shift . 13))
(622 (op/bitwise-xor . 13))
(623 (op/bitwise-ior . 13))
(624 (op/bitwise-and . 13))
(625 (op/bitwise-not . 13))
(626 (op/make-rectangular . 13))
(627 (op/make-polar . 13))
(628 (op/magnitude . 13))
(629 (op/angle . 13))
(630 (op/sqrt . 13))
(631 (op/atan . 13))
(632 (op/acos . 13))
(633 (op/asin . 13))
(634 (op/tan . 13))
(635 (op/cos . 13))
(636 (op/sin . 13))
(637 (op/log . 13))
(638 (op/exp . 13))
(639 (op/imag-part . 13))
(640 (op/real-part . 13))
(641 (op/denominator . 13))
(642 (op/numerator . 13))
(643 (op/floor . 13))
(644 (op/remainder . 13))
(645 (op/quotient . 13))
(646 (op/< . 13))
(647 (op/= . 13))
(648 (op// . 13))
(649 (op/- . 13))
(650 (op/* . 13))
(651 (op/+ . 13))
(652 (op/inexact->exact . 13))
(653 (op/exact->inexact . 13))
(654 (op/exact? . 13))
(655 (op/complex? . 13))
(656 (op/real? . 13))
(657 (op/rational? . 13))
(658 (op/integer? . 13))
(659 (op/number? . 13))
(660 (op/eq? . 13))
(661 (op/computed-goto . 13))
(662 (op/jump . 13))
(663 (op/jump-if-false . 13))
(664 (op/call-template . 13))
(665 (op/goto-template . 13))
(666 (op/ignore-values . 13))
(667 (op/return-values . 13))
(668 (op/values . 13))
(669 (op/return . 13))
(670 (op/call-with-values . 13))
(671 (op/with-continuation . 13))
(672 (op/apply . 13))
(673 (op/move-args-and-call . 13))
(674 (op/call . 13))
(675 (op/get-cont-from-heap . 13))
(676 (op/current-cont . 13))
(677 (op/make-cont . 13))
(678 (op/stack-set! . 13))
(679 (op/stack-ref . 13))
(680 (op/pop . 13))
(681 (op/push . 13))
(682 (op/closure . 13))
(683 (op/set-global! . 13))
(684 (op/global . 13))
(685 (op/set-local! . 13))
(686 (op/local2 . 13))
(687 (op/local1 . 13))
(688 (op/local0 . 13))
(689 (op/local . 13))
(690 (op/literal . 13))
(691 (op/make-rest-list . 13))
(692 (op/pop-env . 13))
(693 (op/make-heap-env . 13))
(694 (op/make-env . 13))
(695 (op/nargs . 13))
(696 (op/check-nargs>= . 13))
(697 (op/check-nargs= . 13))
(698 (op-count . 13))
(699 (op . 13))
(700 (opcode-arg-specs . 13))
(701 (interrupt/memory-shortage . 13))
(702 (interrupt/keyboard . 13))
(703 (interrupt/alarm . 13))
(704 (interrupt-count . 13))
(705 (interrupt . 13))
(706 (time-option/real-time . 13))
(707 (time-option/run-time . 13))
(708 (time-option/ticks-per-second . 13))
(709 (time-option-count . 13))
(710 (time-option . 13))
(711 (memory-status-option/gc-count . 13))
(712 (memory-status-option/set-minimum-recovered-space! . 13))
(713 (memory-status-option/stack-size . 13))
(714 (memory-status-option/heap-size . 13))
(715 (memory-status-option/available . 13))
(716 (memory-status-option-count . 13))
(717 (memory-status-option . 13))
(718 (stob/bignum . 13))
(719 (stob/double . 13))
(720 (stob/code-vector . 13))
(721 (stob/string . 13))
(722 (stob/unused-d-header2 . 13))
(723 (stob/unused-d-header1 . 13))
(724 (stob/external . 13))
(725 (stob/weak-pointer . 13))
(726 (stob/template . 13))
(727 (stob/extended-number . 13))
(728 (stob/continuation . 13))
(729 (stob/record . 13))
(730 (stob/ratio . 13))
(731 (stob/port . 13))
(732 (stob/location . 13))
(733 (stob/closure . 13))
(734 (stob/vector . 13))
(735 (stob/symbol . 13))
(736 (stob/pair . 13))
(737 (stob-count . 13))
(738 (stob . 13))
(739 (stob-data . 13))
(740 (usual-exception-handler . 17))
(741 (define-exception-handler . 17))
(742 (signal-exception . 17))
(743 (exception-handlers . 17))
(744 (initialize-exceptions! . 17))
(745 (make-opcode-generic! . 17))
(746 (really-signal-condition . 17))
(747 (with-handler . 17))
(748 ($condition-handlers . 17))
(749 (ignore-errors . 17))
(750 (continuation-preview . 17))
(751 (*wna-handlers* . 17))
(752 (define-wna-handler . 17))
(753 (op/check-nargs= . 17))
(754 (wna-lose . 17))
(755 (comparison-wna . 17))
(756 (signature-item-name . 29))
(757 (signature-item-type . 29))
(758 (variable-signature-item? . 29))
(759 (syntax-signature-item? . 29))
(760 (type/signature . 29))
(761 (really-make-signature . 29))
(762 (really-signature-references . 29))
(763 (really-signature-ref . 29))
(764 (really-signature-items . 29))
(765 (signature? . 29))
(766 (make-signature . 29))
(767 (make-simple-signature . 29))
(768 (make-compound-signature . 29))
(769 (signature-items . 29))
(770 (signature-ref . 29))
(771 (signature-references . 29))
(772 (note-reference-to-signature! . 29))
(773 (type/structure . 29))
(774 (really-make-structure . 29))
(775 (structure-clients . 29))
(776 (structure-package . 29))
(777 (structure-signature . 29))
(778 (structure-name . 29))
(779 (structure? . 29))
(780 (make-structure . 29))
(781 (structure-unstable? . 29))
(782 (structure-exports? . 29))
(783 (undefined-exports . 29))
(784 (verify-later! . 29))
(785 ($losers . 29))
(786 ($package-losers . 29))
(787 (package-system-sentinel . 29))
(788 (package-open! . 29))
(789 (check-structure . 29))
(790 (type/package . 29))
(791 (really-make-package . 29))
(792 (package-uid . 29))
(793 (package-loaded? . 29))
(794 (set-package-loaded?! . 29))
(795 (package-clauses . 29))
(796 (package-file-name . 29))
(797 (package-structures . 29))
(798 (package-cached . 29))
(799 (package-seen . 29))
(800 (package-locations . 29))
(801 (package-integrate? . 29))
(802 (set-package-integrate?! . 29))
(803 (package-for-syntax-promise . 29))
(804 (package-evaluator . 29))
(805 (package-definitions . 29))
(806 (package-accesses-thunk . 29))
(807 (package-opens-thunk . 29))
(808 (set-package-opens-thunk! . 29))
(809 (package-opens-really . 29))
(810 (set-package-opens! . 29))
(811 (package? . 29))
(812 (make-package . 29))
(813 (package-for-syntax . 29))
(814 (new-package-uid . 29))
(815 (*package-uid* . 29))
(816 (package-name-table . 29))
(817 (package-name . 29))
(818 (set-package-name! . 29))
(819 (make-simple-package . 29))
(820 (package-unstable? . 29))
(821 (package-opens . 29))
(822 (package-accesses . 29))
(823 (package-lookup . 29))
(824 (proj2 . 29))
(825 (package-lookup-1 . 29))
(826 (package-check-variable . 29))
(827 (package-check-assigned . 29))
(828 (package-define! . 29))
(829 (maybe-note-redefinition . 29))
(830 (compatible? . 29))
(831 (exporting-package . 29))
(832 (not-variable . 29))
(833 (assume-denotation . 29))
(834 (probe-package . 29))
(835 (package-ensure-defined! . 29))
(836 (for-each-definition . 29))
(837 (initialize-package! . 29))
(838 (reinitialize-package! . 29))
(839 (package-define-access! . 29))
(840 (transform-for-structure-ref . 29))
(841 (initialize-reified-package! . 29))
(842 (location-from-id . 29))
(843 (binding-description-string . 29))
(844 ($note-undefined . 29))
(845 (note-undefined! . 29))
(846 (noting-undefined-variables . 29))
(847 (*location-uid* . 29))
(848 (location-name-table . 29))
(849 (flush-location-names . 29))
(850 (make-new-location . 29))
(851 (new-location-uid . 29))
(852 (location-info . 29))
(853 (copy-location-info! . 29))
(854 (location-name . 29))
(855 (location-package-name . 29))
(856 (copy-shadowed-contents! . 29))
(857 (package-lookup-location . 29))
(858 (lookup-imported-location . 29))
(859 (package-find-location . 29))
(860 (get-location . 29))
(861 (assigned-locations . 29))
(862 (location-ever-assigned? . 29))
(863 (verify-package . 29))
(864 (verify-package-undefineds . 29))
(865 (verify-package-cached . 29))
(866 (cope-with-mutation . 29))
(867 (*shadow-action* . 29))
(868 (set-shadow-action! . 29))
(869 (packages-seeing-location . 29))
(870 (reset-packages-state! . 29))
(871 (undefined-variables . 29))
(872 (package-define-location! . 29))
(873 (environment-ref . 32))
(874 (environment-set! . 32))
(875 (environment-define! . 32))
(876 (*structure-ref . 32))
(877 ($interaction-environment . 32))
(878 (interaction-environment . 32))
(879 (set-interaction-environment! . 32))
(880 (with-interaction-environment . 32))
(881 (scheme-report-environment . 32))
(882 (*scheme-report-environment* . 32))
(883 (*scheme-report-number* . 32))
(884 (set-scheme-report-environment! . 32))
(885 (make-package-for-syntax . 32))
(886 (*replaced-locations* . 23))
(887 (shadow-location! . 23))
(888 (maybe-replace-location . 23))
(889 (deal-with-replaced-variables . 23))
(890 (the-usual-transforms . 28))
(891 (define-usual-macro . 28))
(892 (usual-transform-procedure . 28))
(893 (for-each-usual-macro . 28))
(894 (process-rules . 28))
(895 (segment-pattern? . 28))
(896 (segment-template? . 28))
(897 (indicators-for-zero-or-more . 28))
(898 (find-free-names-in-syntax-rules . 28))
(899 (namestring . 26))
(900 (directory-component-separator . 26))
(901 (type-component-separator . 26))
(902 (namestring-component . 26))
(903 (file-name-preferred-case . 26))
(904 (*scheme-file-type* . 26))
(905 (*load-file-type* . 26))
(906 (file-name-directory . 26))
(907 (file-name-nondirectory . 26))
(908 (file-nondirectory-position . 26))
(909 (string-posq . 26))
(910 (*translations* . 26))
(911 (translations . 26))
(912 (set-translation! . 26))
(913 (translate . 26))
(914 ($note-file-package . 30))
(915 (scan-forms . 30))
(916 (scan-file . 30))
(917 (scan-form-list . 30))
(918 (scan-form . 30))
(919 (process-define-syntax . 30))
(920 (eval-for-syntax . 30))
(921 (scan-body . 30))
(922 (scan-body-form . 30))
(923 (operator/begin . 30))
(924 (operator/define . 30))
(925 (scan-structures . 30))
(926 (scan-package . 30))
(927 (initialize-usual-transforms! . 30))
(928 (integrate-all-primitives! . 30))
(929 (optimizers-table . 30))
(930 (get-optimizer . 30))
(931 (set-optimizer! . 30))
(932 (new-template-uid . 31))
(933 (*template-uid* . 31))
(934 (template-uid . 31))
(935 (set-template-uid! . 31))
(936 (debug-flag-names . 31))
(937 (type/debug-flags . 31))
(938 (make-debug-flags . 31))
(939 ($debug-flags . 31))
(940 (debug-flag-accessor . 31))
(941 (debug-flag-modifier . 31))
(942 (keep-source-code? . 31))
(943 (keep-environment-maps? . 31))
(944 (keep-procedure-names? . 31))
(945 (keep-file-names? . 31))
(946 (tabulate-debug-data? . 31))
(947 (debug-data-table . 31))
(948 (with-fresh-compiler-state . 31))
(949 (saving-and-restoring . 31))
(950 (debug-data-type . 31))
(951 (make-debug-data . 31))
(952 (debug-data-source . 31))
(953 (set-debug-data-source! . 31))
(954 (debug-data-env-maps . 31))
(955 (set-debug-data-env-maps! . 31))
(956 (debug-data-pc-in-parent . 31))
(957 (debug-data-parent . 31))
(958 (debug-data-name . 31))
(959 (debug-data-uid . 31))
(960 (debug-data? . 31))
(961 (new-debug-data . 31))
(962 (debug-data->info . 31))
(963 (get-debug-data . 31))
(964 (note-debug-data! . 31))
(965 (interesting-debug-data? . 31))
(966 (debug-data-names . 31))
(967 (template-debug-data . 31))
(968 (template-id . 31))
(969 (template-name . 31))
(970 (template-names . 31))
(971 (make-segment . 31))
(972 (segment-size . 31))
(973 (segment-emitter . 31))
(974 (segment->template . 31))
(975 (segment-data->template . 31))
(976 (make-astate . 31))
(977 (emit-byte! . 31))
(978 (emit-literal! . 31))
(979 (astate-literals . 31))
(980 (astate-pc . 31))
(981 (emit-segment! . 31))
(982 (empty-segment . 31))
(983 (instruction . 31))
(984 (sequentially . 31))
(985 (sequentially-2 . 31))
(986 (instruction-with-literal . 31))
(987 (instruction-with-variable . 31))
(988 (emit-location! . 31))
(989 (instruction-with-template . 31))
(990 (instruction-with-offset . 31))
(991 (instruction-with-offset&byte . 31))
(992 (byte-limit . 31))
(993 ($debug-data . 31))
(994 (note-source-code . 31))
(995 (note-environment . 31))
(996 (emit-with-environment-maps! . 31))
(997 ($environment-maps . 31))
(998 (environment-maps-table . 31))
(999 (compile . 31))
(1000 (compile-variable . 31))
(1001 (compile-literal . 31))
(1002 (compilators . 31))
(1003 (define-compilator . 31))
(1004 (get-compilator . 31))
(1005 (compile-constant . 31))
(1006 (compile-begin . 31))
(1007 (compile-call . 31))
(1008 (lambda-expression? . 31))
(1009 (operator/lambda . 31))
(1010 (acceptable-arguments? . 31))
(1011 (compile-redex . 31))
(1012 (compile-unknown-call . 31))
(1013 (maybe-push-continuation . 31))
(1014 (push-arguments . 31))
(1015 (push-all-with-names . 31))
(1016 (compile-lambda . 31))
(1017 (compile-lambda-code . 31))
(1018 (generate-trap . 31))
(1019 (make-cont . 31))
(1020 (cont-segment . 31))
(1021 (cont-source-info . 31))
(1022 (return-cont-segment . 31))
(1023 (return-cont . 31))
(1024 (return-cont? . 31))
(1025 (fall-through-cont . 31))
(1026 (fall-through-cont? . 31))
(1027 (ignore-values-segment . 31))
(1028 (ignore-values-cont . 31))
(1029 (ignore-values-cont? . 31))
(1030 (deliver-value . 31))
(1031 (named-cont . 31))
(1032 (cont-name . 31))
(1033 (compile-body . 31))
(1034 (careful-sequentially . 31))
(1035 (large-segment-size . 31))
(1036 (compile-location . 31))
(1037 (env-ref? . 31))
(1038 (env-ref-back . 31))
(1039 (env-ref-over . 31))
(1040 (bind-vars . 31))
(1041 (probe-cenv . 31))
(1042 (clookup . 31))
(1043 (clookup-variable . 31))
(1044 (clookup-assigned . 31))
(1045 (really-clookup . 31))
(1046 (op/call . 31))
(1047 (op/check-nargs= . 31))
(1048 (op/check-nargs>= . 31))
(1049 (op/closure . 31))
(1050 (op/false . 31))
(1051 (op/global . 31))
(1052 (op/ignore-values . 31))
(1053 (op/jump . 31))
(1054 (op/jump-if-false . 31))
(1055 (op/literal . 31))
(1056 (op/local . 31))
(1057 (op/local0 . 31))
(1058 (op/local1 . 31))
(1059 (op/local2 . 31))
(1060 (op/make-cont . 31))
(1061 (op/make-env . 31))
(1062 (op/make-rest-list . 31))
(1063 (op/push . 31))
(1064 (op/return . 31))
(1065 (op/set-global! . 31))
(1066 (op/set-local! . 31))
(1067 (op/trap . 31))
(1068 (op/unspecific . 31))
(1069 (op/apply . 31))
(1070 (op/call-with-values . 31))
(1071 (op/current-cont . 31))
(1072 (op/external-call . 31))
(1073 (op/make-byte-vector-object . 31))
(1074 (op/make-char-vector-object . 31))
(1075 (op/make-stored-object . 31))
(1076 (op/make-vector-object . 31))
(1077 (op/pop . 31))
(1078 (op/return-values . 31))
(1079 (op/stack-ref . 31))
(1080 (op/stored-object-byte-length . 31))
(1081 (op/stored-object-has-type? . 31))
(1082 (op/stored-object-indexed-byte-ref . 31))
(1083 (op/stored-object-indexed-byte-set! . 31))
(1084 (op/stored-object-indexed-char-ref . 31))
(1085 (op/stored-object-indexed-char-set! . 31))
(1086 (op/stored-object-indexed-ref . 31))
(1087 (op/stored-object-indexed-set! . 31))
(1088 (op/stored-object-length . 31))
(1089 (op/stored-object-ref . 31))
(1090 (op/stored-object-set! . 31))
(1091 (op/values . 31))
(1092 (define-compiler-primitive . 31))
(1093 (exceptional-primitives . 31))
(1094 (closed-compilators . 31))
(1095 (define-closed-compilator . 31))
(1096 (get-closed-compilator . 31))
(1097 (define-simple-primitive . 31))
(1098 (push-all-but-last . 31))
(1099 (define-data-struct-primitives . 31))
(1100 (define-vector-primitives . 31))
(1101 (compile-form . 31))
(1102 (compile-file . 31))
(1103 (compile-and-run-forms . 31))
(1104 (compile-and-run-file . 31))
(1105 (compile-and-run-scanned-forms . 31))
(1106 (compile-scanned-forms . 31))
(1107 (compile-processed-form . 31))
(1108 (make-startup-procedure . 31))
(1109 (an-ignore-values-cont . 31))
(1110 (eval . 37))
(1111 (load . 37))
(1112 (eval-from-file . 37))
(1113 (invoke-template . 37))
(1114 (display-condition . 33))
(1115 (really-display-condition . 33))
(1116 (*depth* . 33))
(1117 (*length* . 33))
(1118 (disclose-condition-methods . 33))
(1119 (disclose-condition . 33))
(1120 (limited-write . 33))
(1121 (command-processor . 40))
(1122 (mini-load . 40))
(1123 (read-string . 40))
(1124 (interrupt-handlers . 18))
(1125 (initialize-interrupts! . 18))
(1126 (time-option/ticks-per-second . 18))
(1127 (one-second . 18))
(1128 (no-interrupts . 18))
(1129 (all-interrupts . 18))
(1130 (with-interrupts-inhibited . 18))
(1131 (with-interrupts-allowed . 18))
(1132 (with-interrupts . 18))
(1133 (enabled-interrupts . 18))
(1134 (interrupt-before-heap-overflow! . 18))
(1135 (interrupt/memory-shortage . 18))
(1136 (memory-status-option/set-minimum-recovered-space! . 18))
(1137 (memory-status-option/heap-size . 18))
(1138 (usual-resumer . 22))
(1139 (start . 41))
(1140 (make-built-in-structures . 41))
(1141 (initialize-interaction-environment! . 41))
(1142 (make-initial-package . 41))
(1143 (make-env-for-syntax-promise . 41))
(1144 (make-procedure-for-inline-transform . 35))
(1145 (really-make-procedure-for-inline-transform . 35))
(1146 (extend-substitution . 35))
(1147 (substitute . 35))
(1148 (substitute-list . 35))
(1149 (invert-substitution-template . 35))
(1150 (operator/quote . 35))
(1151 (operator/lambda . 35))
(1152 (operator/local . 35))
(1153 (operator/begin . 35))
(1154 (oplet? . 35))
(1155 (oplet->operator . 35))
(1156 (operator->oplet . 35))
(1157 (extrinsic? . 35))
(1158 (extrinsic->name . 35))
(1159 (name->extrinsic . 35))
(1160 (*extrinsic-debug?* . 35))
(1161 (write-extrinsic . 35))
(1162 (make-a-package . 34))
(1163 (init-defpackage! . 34))
(1164 (loser . 34))
(1165 (*evaluator* . 34))
(1166 (*make-package-for-syntax-promise* . 34))
(1167 (make-compiler-base . 34))
(1168 (signature-of . 34))
(1169 (ensure-loaded . 39))
-
; Template uid -> name, parent, pc in parent, env maps
(1 closure-template 0 1 ())
(2 continuation-ref 0 5 ())
(3 output-port? 0 9 ())
(4 closure? 0 13 ())
(1260 #f 1251 464 (#(273 457 #(the-package) ()) #(242 258 #(the-package) ()) #(14 227 #(the-package) ())))
(5 complex? 0 17 ())
(1261 #f 1260 50 (#(4 135 #(input##190 rename##191 compare##192) (#(12 135 #(tail##189) (#(68 132 #(struct) (#(79 132 #(name) ()))) #(21 57 #(temp##188) (#(36 55 #(temp##188) ())))))))))
(6 arithmetic-shift 0 21 ())
(1262 #f 1260 126 (#(4 64 #(input##194 rename##195 compare##196) (#(12 64 #(tail##193) (#(31 61 #(sig) ())))))))
(7 signal-condition 0 25 ())
(1263 #f 1262 48 (#(4 29 #(sig) ())))
(8 integer? 0 29 ())
(1264 #f 1260 197 (#(4 229 #(input##199 rename##200 compare##201) (#(12 229 #(tail##198) (#(76 226 #(name) (#(87 226 #(args) (#(95 226 #(body) ()))))) #(21 62 #(temp##197) (#(40 45 #(temp##197) ())))))))))
(9 make-closure 0 33 ())
(1265 #f 1260 224 (#(145 153 #(parse-package-description) ())))
(10 template-ref 0 37 ())
(1266 #f 1265 15 (#(4 213 #(input##204 rename##205 compare##206) (#(12 213 #(tail##203) (#(68 210 #(name) (#(79 210 #(sig) ()))) #(21 57 #(temp##202) (#(36 55 #(temp##202) ())))))))))
(11 make-rectangular 0 41 ())
(1267 #f 1265 56 (#(4 900 #(input##212 rename##213 compare##214) (#(12 900 #(tail##211) (#(507 897 #(name1) (#(524 897 #(sig1) (#(547 897 #(name) (#(571 897 #(sig) (#(592 897 #(keyword) (#(613 897 #(stuff) ()))))))))))) #(364 490 #(temp##207) (#(471 486 #(loop) ()) #(383 464 #(temp##207) (#(445 460 #(loop) ()) #(402 438 #(temp##207) (#(417 436 #(temp##207) ()))))))) #(155 355 #(name) (#(172 355 #(sig) (#(192 355 #(keyword) (#(213 355 #(stuff) ()))))))) #(21 138 #(temp##207) (#(119 134 #(loop) ()) #(40 112 #(temp##207) (#(59 95 #(temp##207) (#(74 93 #(temp##207) ())))))))))))))
(12 string=? 0 45 ())
(1268 loop 1267 120 (#(4 76 #(l) (#(13 76 #(temp##208) (#(40 59 #(temp##207) ())))))))
(13 extended-number? 0 49 ())
(1269 #f 1267 177 (#(4 10 #(temp##207) ())))
(14 reverse-list->string 0 53 ())
(1270 #f 1267 197 (#(4 10 #(temp##207) ())))
(15 denominator 0 57 ())
(1271 #f 1267 312 (#(4 13 #(keyword stuff) ())))
(16 call-with-values 0 61 ())
(1272 loop 1267 446 (#(4 93 #(l) (#(13 93 #(temp##209) (#(40 76 #(temp##207) (#(55 74 #(temp##207) ())))))))))
(17 weak-pointer-ref 0 65 ())
(1273 loop 1267 472 (#(4 76 #(l) (#(13 76 #(temp##210) (#(40 59 #(temp##207) ())))))))
(18 find-all-symbols 0 69 ())
(1274 #f 1267 529 (#(4 10 #(temp##207) ())))
(19 code-vector? 0 73 ())
(1275 #f 1267 552 (#(4 13 #(temp##207) ())))
(20 exp 0 77 ())
(1276 #f 1267 576 (#(4 10 #(temp##207) ())))
(21 sin 0 81 ())
(1277 #f 1267 597 (#(4 10 #(temp##207) ())))
(22 make-extended-number 0 85 ())
(1278 #f 1267 635 (#(4 85 #(name) ())))
(23 cos 0 89 ())
(1279 #f 1267 707 (#(4 13 #(keyword stuff) ())))
(1280 #f 1267 747 (#(4 123 #(name sig) ())))
(25 collect 24 1 ())
(1281 #f 1265 97 (#(4 79 #(input##216 rename##217 compare##218) (#(12 79 #(tail##215) (#(31 76 #(item) ())))))))
(26 external-lookup 24 5 ())
(1282 parse-package-description 1265 146 (#(4 58 #(form rename compare return) (#(30 58 #(%open %access) (#(34 58 #(loop) ())))))))
(27 tan 24 9 ())
(1283 loop 1282 35 (#(4 254 #(clauses opens accesses others) (#(114 254 #(keyword) ())))))
(28 log 24 13 ())
(1284 #f 1265 151 (#(4 20 #(form rename compare) ())))
(29 continuation-length 24 17 ())
(1285 #f 1284 14 (#(4 189 #(opens accesses others) (#(78 189 #(%make %lambda %cons %list %quote %file-name) ())))))
(30 make-code-vector 24 21 ())
(1286 #f 1285 122 (#(4 37 #(a) ())))
(31 cdr 24 25 ())
(1287 #f 1265 258 (#(4 168 #(input##221 rename##222 compare##223) (#(12 168 #(tail##220) (#(135 165 #(sig) ()) #(105 124 #(temp##219) ()) #(76 96 #(a) (#(87 96 #(pair) ()))) #(21 62 #(temp##219) (#(40 45 #(temp##219) ())))))))))
(32 bitwise-xor 24 29 ())
(1288 #f 1265 329 (#(4 191 #(input##226 rename##227 compare##228) (#(12 191 #(tail##225) (#(68 188 #(name) (#(79 188 #(exp) ()))) #(21 57 #(temp##224) (#(36 55 #(temp##224) ())))))))))
(33 car 24 33 ())
(34 string? 24 37 ())
(35 symbol? 24 41 ())
(36 set-cdr! 24 45 ())
(37 bitwise-not 24 49 ())
(38 vector? 24 53 ())
(39 closure-env 24 57 ())
(40 set-car! 24 61 ())
(41 bitwise-ior 24 65 ())
(42 number? 24 69 ())
(43 template-length 24 73 ())
(44 string-hash 24 77 ())
(45 primitive-catch 24 81 ())
(46 make-string 24 85 ())
(47 input-port? 24 89 ())
(48 record? 24 93 ())
(49 make-vector 24 97 ())
(50 extended-number-set! 24 101 ())
(51 write-image 24 105 ())
(52 eq? 24 109 ())
(53 bitwise-and 24 113 ())
(54 location-id 24 117 ())
(55 code-vector-set! 24 121 ())
(56 make-record 24 125 ())
(57 intern 24 129 ())
(58 values 24 133 ())
(59 unassigned 24 137 ())
(60 string-set! 24 141 ())
(61 vector-set! 24 145 ())
(62 extended-number-ref 24 149 ())
(63 unspecific 24 153 ())
(64 schedule-interrupt 24 157 ())
(65 code-vector-ref 24 161 ())
(66 find-all-xs 24 165 ())
(67 char-ready? 24 169 ())
(68 set-interrupt-handlers! 24 173 ())
(69 eof-object? 24 177 ())
(70 record-set! 24 181 ())
(71 ascii->char 24 185 ())
(72 char->ascii 24 189 ())
(73 set-enabled-interrupts! 24 193 ())
(74 external-value 24 197 ())
(75 make-immutable! 24 201 ())
(76 close-port 24 205 ())
(77 string-ref 24 209 ())
(78 immutable? 24 213 ())
(79 vector-ref 24 217 ())
(80 exact? 24 221 ())
(81 write-char 24 225 ())
(82 symbol->string 24 229 ())
(83 record-ref 24 233 ())
(84 make-polar 24 237 ())
(85 numerator 24 241 ())
(86 extended-number-length 24 245 ())
(87 error 24 249 ())
(88 exact->inexact 24 253 ())
(89 inexact->exact 24 257 ())
(90 memory-status 24 261 ())
(91 apply 24 265 ())
(92 code-vector-length 24 269 ())
(93 floor 24 273 ())
(94 with-continuation 24 277 ())
(95 magnitude 24 281 ())
(96 char=? 24 285 ())
(97 char<? 24 289 ())
(98 continuation? 24 293 ())
(99 remainder 24 297 ())
(100 vm-return 24 301 ())
(101 false 24 305 ())
(102 angle 24 309 ())
(103 open-port 24 313 ())
(104 string-length 24 317 ())
(105 external? 24 321 ())
(106 make-continuation 24 325 ())
(107 vector-length 24 329 ())
(108 template? 24 333 ())
(109 rational? 24 337 ())
(110 location? 24 341 ())
(111 external-name 24 345 ())
(112 set-exception-handler! 24 349 ())
(113 pair? 24 353 ())
(114 record-length 24 357 ())
(115 make-external 24 361 ())
(116 external-call 24 365 ())
(117 set-dynamic-state! 24 369 ())
(118 real-part 24 373 ())
(119 real? 24 377 ())
(120 make-template 24 381 ())
(121 imag-part 24 385 ())
(122 make-location 24 389 ())
(123 = 24 393 ())
(124 < 24 397 ())
(125 char? 24 401 ())
(126 quotient 24 405 ())
(127 / 24 409 ())
(128 weak-pointer? 24 413 ())
(129 - 24 417 ())
(130 continuation-set! 24 421 ())
(131 peek-char 24 425 ())
(132 + 24 429 ())
(133 * 24 433 ())
(134 contents 24 437 ())
(135 sqrt 24 441 ())
(136 read-char 24 445 ())
(137 set-contents! 24 449 ())
(138 make-weak-pointer 24 453 ())
(139 get-dynamic-state 24 457 ())
(140 trap 24 461 ())
(141 cons 24 465 ())
(142 template-set! 24 469 ())
(143 time 24 473 ())
(144 location-defined? 24 477 ())
(145 asin 24 481 ())
(146 write-string 24 485 ())
(147 vm-extension 24 489 ())
(148 force-output 24 493 ())
(149 acos 24 497 ())
(150 set-location-defined?! 24 501 ())
(151 atan 24 505 ())
(153 invoke-closure 152 21 (#(7 14 #(thunk-closure args) ())))
(154 make-undefined-location 152 29 (#(4 24 #(id) (#(15 24 #(loc) ())))))
(155 location-assigned? 152 33 (#(4 21 #(loc) ())))
(156 string-copy 152 37 (#(4 37 #(s) (#(11 37 #(z) (#(21 37 #(copy) (#(25 37 #(loop) ())))))))))
(157 loop 156 26 (#(4 44 #(i) ())))
(158 string->symbol 152 41 (#(4 31 #(string) ())))
(159 really-string->symbol 152 45 (#(4 44 #(string) (#(38 44 #(sym) ())))))
(160 flush-the-symbol-table! 152 53 ())
(161 restore-the-symbol-table! 152 57 ())
(162 maybe-open-input-file 152 70 (#(4 11 #(string) ())))
(163 maybe-open-output-file 152 74 (#(4 11 #(string) ())))
(164 open-input-file 152 78 (#(4 43 #(string) (#(13 43 #(temp##0) ())))))
(165 open-output-file 152 82 (#(4 43 #(string) (#(13 43 #(temp##1) ())))))
(166 halt 152 94 (#(4 11 #(n) ())))
(167 #f 166 8 ())
(169 not 168 1 (#(4 15 #(x) ())))
(170 boolean? 168 5 (#(4 28 #(x) (#(13 28 #(temp##2) ())))))
(171 eqv? 168 9 (#(4 60 #(x y) (#(13 60 #(temp##3) ())))))
(172 equal? 168 13 (#(4 164 #(obj1 obj2) (#(128 158 #(z) (#(143 155 #(loop) ())))))))
(173 loop 172 144 (#(4 59 #(i) ())))
(174 > 168 17 (#(4 11 #(x y) ())))
(175 <= 168 21 (#(4 19 #(x y) ())))
(176 >= 168 25 (#(4 19 #(x y) ())))
(177 max 168 29 (#(7 20 #(first rest) ())))
(178 #f 177 8 (#(4 19 #(x y) ())))
(179 min 168 33 (#(7 20 #(first rest) ())))
(180 #f 179 8 (#(4 19 #(x y) ())))
(182 abs 181 1 (#(4 23 #(n) ())))
(183 zero? 181 5 (#(4 11 #(x) ())))
(184 positive? 181 9 (#(4 11 #(x) ())))
(185 negative? 181 13 (#(4 11 #(x) ())))
(186 even? 181 17 (#(4 15 #(n) ())))
(187 odd? 181 21 (#(4 23 #(n) ())))
(188 caar 181 25 (#(4 13 #(x) ())))
(189 cadr 181 29 (#(4 13 #(x) ())))
(190 cdar 181 33 (#(4 13 #(x) ())))
(191 cddr 181 37 (#(4 13 #(x) ())))
(192 caaar 181 41 (#(4 16 #(x) ())))
(193 caadr 181 45 (#(4 16 #(x) ())))
(194 cadar 181 49 (#(4 16 #(x) ())))
(195 caddr 181 53 (#(4 16 #(x) ())))
(196 cdaar 181 57 (#(4 16 #(x) ())))
(197 cdadr 181 61 (#(4 16 #(x) ())))
(198 cddar 181 65 (#(4 16 #(x) ())))
(199 cdddr 181 69 (#(4 16 #(x) ())))
(200 caaaar 181 73 (#(4 14 #(x) ())))
(201 caaadr 181 77 (#(4 14 #(x) ())))
(202 caadar 181 81 (#(4 14 #(x) ())))
(203 caaddr 181 85 (#(4 14 #(x) ())))
(204 cadaar 181 89 (#(4 14 #(x) ())))
(205 cadadr 181 93 (#(4 14 #(x) ())))
(206 caddar 181 97 (#(4 14 #(x) ())))
(207 cadddr 181 101 (#(4 14 #(x) ())))
(208 cdaaar 181 105 (#(4 14 #(x) ())))
(209 cdaadr 181 109 (#(4 14 #(x) ())))
(210 cdadar 181 113 (#(4 14 #(x) ())))
(211 cdaddr 181 117 (#(4 14 #(x) ())))
(212 cddaar 181 121 (#(4 14 #(x) ())))
(213 cddadr 181 125 (#(4 14 #(x) ())))
(214 cdddar 181 129 (#(4 14 #(x) ())))
(215 cddddr 181 133 (#(4 14 #(x) ())))
(216 null? 181 137 (#(4 11 #(x) ())))
(217 list 181 141 (#(5 8 #(l) ())))
(218 length 181 145 (#(4 17 #(l) ())))
(219 #f 218 5 (#(4 11 #(ignore n) ())))
(220 append 181 149 (#(5 33 #(lists) (#(21 33 #(recur) ())))))
(221 recur 220 22 (#(4 50 #(lists) ())))
(222 reverse 181 153 (#(4 14 #(list) ())))
(223 append-reverse 181 157 (#(4 38 #(list seed) ())))
(224 list-tail 181 161 (#(4 33 #(l i) ())))
(225 list-ref 181 165 (#(4 22 #(l k) ())))
(226 mem 181 169 (#(4 7 #(pred) ())))
(227 #f 226 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(228 loop 227 9 (#(4 50 #(l) ())))
(229 ass 181 212 (#(4 7 #(pred) ())))
(230 #f 229 5 (#(4 20 #(obj l) (#(8 20 #(loop) ())))))
(231 loop 230 9 (#(4 56 #(l) ())))
(232 assq 181 242 (#(4 50 #(x l) ())))
(233 list? 181 246 (#(4 23 #(l) (#(8 23 #(recur) ())))))
(234 recur 233 9 (#(4 109 #(l lag) (#(13 109 #(temp##5) (#(40 106 #(temp##4) ())))))))
(235 char>? 181 250 (#(4 11 #(x y) ())))
(236 char>=? 181 254 (#(4 19 #(x y) ())))
(237 char<=? 181 258 (#(4 19 #(x y) ())))
(238 char-whitespace? 181 262 (#(4 28 #(c) ())))
(239 char-lower-case? 181 266 (#(4 34 #(c) ())))
(240 char-upper-case? 181 270 (#(4 34 #(c) ())))
(241 char-numeric? 181 274 (#(4 34 #(c) ())))
(242 char-alphabetic? 181 278 (#(4 33 #(c) (#(18 33 #(temp##6) ())))))
(243 char-upcase 181 292 (#(4 30 #(c) ())))
(244 char-downcase 181 296 (#(4 30 #(c) ())))
(245 char-ci-compare 181 300 (#(4 7 #(pred) ())))
(246 #f 245 5 (#(4 32 #(c1 c2) ())))
(247 string 181 369 (#(5 12 #(rest) ())))
(248 substring 181 373 (#(4 37 #(s start end) (#(18 37 #(new-string) (#(22 37 #(loop##7) ())))))))
(249 loop##7 248 23 (#(4 51 #(i j) ())))
(250 string-append 181 377 (#(5 55 #(strings) (#(25 55 #(len) (#(35 55 #(new-string) (#(39 55 #(loop) ())))))))))
(251 #f 250 10 (#(4 13 #(s n) ())))
(252 loop 250 40 (#(4 51 #(s i) (#(24 51 #(string) (#(31 51 #(l) (#(35 51 #(loop##8) ())))))))))
(253 loop##8 252 36 (#(4 63 #(j i) ())))
(254 string->list 181 381 (#(4 34 #(v) (#(11 34 #(z) (#(15 34 #(loop##9) ())))))))
(255 loop##9 254 16 (#(4 42 #(i l) ())))
(256 list->string 181 385 (#(4 42 #(l) (#(23 42 #(v) (#(27 42 #(loop##10) ())))))))
(257 loop##10 256 28 (#(4 46 #(i l) ())))
(258 string-fill! 181 389 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##11) ())))))))
(259 loop##11 258 16 (#(4 38 #(i) ())))
(260 make-string=? 181 393 (#(4 7 #(char=?) ())))
(261 #f 260 5 (#(4 41 #(s1 s2) (#(11 41 #(z) (#(26 38 #(loop) ())))))))
(262 loop 261 27 (#(4 60 #(i) ())))
(263 make-string<? 181 410 (#(4 7 #(char<? char=?) ())))
(264 #f 263 5 (#(4 49 #(s1 s2) (#(16 49 #(z1 z2) (#(33 49 #(z) (#(37 49 #(loop) ())))))))))
(265 loop 264 38 (#(4 101 #(i) (#(42 101 #(c1 c2) (#(60 101 #(temp##12) ())))))))
(266 string>? 181 446 (#(4 14 #(s1 s2) ())))
(267 string<=? 181 450 (#(4 27 #(s1 s2) ())))
(268 string>=? 181 454 (#(4 27 #(s1 s2) ())))
(269 string-ci>? 181 458 (#(4 14 #(s1 s2) ())))
(270 string-ci<=? 181 462 (#(4 27 #(s1 s2) ())))
(271 string-ci>=? 181 466 (#(4 27 #(s1 s2) ())))
(272 vector 181 470 (#(5 12 #(l) ())))
(273 vector->list 181 474 (#(4 29 #(v) (#(8 29 #(loop##13) ())))))
(274 loop##13 273 9 (#(4 41 #(i l) ())))
(275 list->vector 181 478 (#(4 42 #(l) (#(23 42 #(v) (#(27 42 #(loop##14) ())))))))
(276 loop##14 275 28 (#(4 46 #(i l) ())))
(277 vector-fill! 181 482 (#(4 27 #(v x) (#(11 27 #(z) (#(15 27 #(loop##15) ())))))))
(278 loop##15 277 16 (#(4 38 #(i) ())))
(279 map 181 486 (#(7 39 #(proc first rest) ())))
(280 map1 181 490 (#(4 52 #(proc l) ())))
(281 map2+ 181 494 (#(4 110 #(proc first rest) (#(17 35 #(temp##16) ())))))
(282 for-each 181 498 (#(7 26 #(proc first rest) (#(11 26 #(loop) ())))))
(283 loop 282 12 (#(4 98 #(first rest) (#(17 35 #(temp##17) ())))))
(284 make-promise 181 502 (#(4 12 #(thunk-then-result) (#(9 12 #(already-run?) ())))))
(285 #f 284 10 ())
(286 force 181 506 (#(4 8 #(promise) ())))
(288 reduce 287 1 (#(4 47 #(cons nil list) ())))
(289 filter 287 5 (#(4 17 #(pred lst) ())))
(290 #f 289 5 (#(4 30 #(x rest) ())))
(291 pos 287 9 (#(4 7 #(pred) ())))
(292 #f 291 5 (#(4 23 #(thing l) (#(8 23 #(loop) ())))))
(293 loop 292 9 (#(4 57 #(i l) ())))
(294 any 287 52 (#(4 54 #(pred l) (#(33 54 #(temp##18) ())))))
(295 every 287 56 (#(4 49 #(pred l) ())))
(296 sublist 287 60 (#(4 56 #(l start end) (#(41 56 #(recur) ())))))
(297 recur 296 42 (#(4 47 #(l end) ())))
(299 inexact? 298 1 (#(4 16 #(n) ())))
(300 modulo 298 5 (#(4 50 #(x y) (#(13 50 #(r) ())))))
(301 ceiling 298 9 (#(4 16 #(x) ())))
(302 truncate 298 13 (#(4 29 #(x) ())))
(303 round 298 17 (#(4 61 #(x) (#(17 61 #(x+1/2) (#(23 61 #(r) ())))))))
(304 gcd 298 21 (#(5 18 #(integers) ())))
(305 #f 304 6 (#(4 79 #(x y) ())))
(306 euclid 298 25 (#(4 59 #(x y) ())))
(307 lcm 298 29 (#(5 18 #(integers) ())))
(308 #f 307 6 (#(4 62 #(x y) (#(21 62 #(g) ())))))
(309 expt 298 33 (#(4 40 #(x n) ())))
(310 raise-to-integer-power 298 37 (#(4 63 #(z p) (#(25 40 #(loop##19) ())))))
(311 loop##19 310 26 (#(4 42 #(a p) ())))
(313 rationalize 312 1 (#(4 36 #(x e) (#(18 36 #(e) ())))))
(314 simplest-rational 312 5 (#(4 142 #(x y) (#(8 142 #(simplest-rational-internal) ())))))
(315 simplest-rational-internal 314 9 (#(4 91 #(x y) (#(14 91 #(fx fy) ())))))
(317 signal 316 5 (#(7 17 #(type stuff) ())))
(318 warn 316 9 (#(7 23 #(message irritants) ())))
(319 syntax-error 316 13 (#(5 17 #(rest) ())))
(320 call-error 316 17 (#(7 29 #(message proc args) ())))
(322 make-family 321 1 (#(4 13 #(id prec) ())))
(323 same-family? 321 45 (#(4 32 #(c1 c2) ())))
(324 make-method-table 321 49 (#(4 31 #(id) ())))
(325 #f 324 9 (#(5 18 #(args) ())))
(326 define-method 321 61 (#(4 58 #(disp family method) (#(21 58 #(displace! prec) (#(25 58 #(loop) ())))))))
(327 displace! 326 5 (#(4 21 #(z x y) ())))
(328 loop 326 26 (#(4 138 #(ms cs) ())))
(329 define-default-method 321 65 (#(4 17 #(disp proc) ())))
(330 define-last-method 321 69 (#(4 17 #(disp proc) ())))
(331 make-generic 321 73 (#(4 21 #(disp) (#(18 21 #(ms) ())))))
(332 #f 331 19 (#(5 15 #(args) ())))
(333 perform-dispatch 321 77 (#(4 68 #(ms args) (#(43 68 #(result) ())))))
(334 fail 321 91 ())
(335 #f 321 128 (#(4 6 #(obj) ())))
(336 make-generic-exception-handler 321 136 (#(4 36 #(table opcode signal-exception) (#(33 36 #(ms) ())))))
(337 #f 336 12 (#(5 15 #(args) ())))
(338 #f 336 34 (#(4 14 #(opcode args) ())))
(339 #f #f #f (#(151 185 #(string->integer do-it digit->integer zero a-minus-ten) ()) #(100 129 #(integer->string integer->digit zero a-minus-10) ())))
(340 #f 339 34 (#(4 74 #(n radix) (#(48 74 #(s) ())))))
(341 #f 339 49 (#(4 17 #(string radix exact?) ())))
(342 number->string 339 83 (#(7 49 #(n radix-or-format-option) ())))
(343 integer->digit 339 117 (#(4 26 #(n) ())))
(344 integer->string 339 122 (#(4 88 #(n radix) (#(53 88 #(magnitude) ()) #(35 50 #(recur) ())))))
(345 recur 344 36 (#(4 59 #(n l) ())))
(346 string->number 339 132 (#(7 186 #(string options) (#(52 186 #(radix) (#(160 186 #(radix) (#(164 186 #(loop) ()))) #(61 157 #(temp##20) ())))))))
(347 loop 346 165 (#(4 229 #(pos exactness? exact? radix? radix) (#(50 197 #(pos) (#(80 197 #(radix-is exactness-is) (#(100 197 #(temp##21) ())))))))))
(348 radix-is 347 73 (#(4 35 #(radix) ())))
(349 exactness-is 347 76 (#(4 35 #(exact?) ())))
(350 digit->integer 339 168 (#(4 127 #(c radix) (#(92 127 #(n) ()) #(28 42 #(n) ())))))
(351 do-it 339 173 (#(4 44 #(string pos sign radix exact?) (#(29 44 #(loop) ())))))
(352 loop 351 30 (#(4 93 #(n pos) (#(58 93 #(d) ())))))
(353 string->integer 339 178 (#(4 102 #(string radix exact?) ())))
(355 record-type 354 1 (#(4 12 #(r) ())))
(356 make-record-type 354 22 (#(4 74 #(id field-names) (#(21 74 #(r) ())))))
(357 record-type? 354 26 (#(4 26 #(obj) ())))
(358 record-type-uid 354 30 (#(4 12 #(rt) ())))
(359 record-type-identification 354 34 (#(4 12 #(rt) ())))
(360 record-type-field-names 354 38 (#(4 12 #(rt) ())))
(361 record-type-discloser 354 42 (#(4 12 #(rt) ())))
(362 record-field-index 354 46 (#(4 28 #(rt name) (#(8 28 #(loop) ())))))
(363 loop 362 9 (#(4 78 #(names i) ())))
(364 record-constructor 354 50 (#(4 45 #(rt names) (#(42 45 #(indexes size) ())))))
(365 #f 364 9 (#(4 14 #(name) ())))
(366 #f 364 43 (#(5 45 #(args) (#(14 45 #(r) (#(29 45 #(loop) ())))))))
(367 loop 366 30 (#(4 140 #(is as) ())))
(368 record-accessor 354 54 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(369 #f 368 55 (#(4 39 #(r) ())))
(370 record-modifier 354 58 (#(4 57 #(rt name) (#(54 57 #(index error-cruft) ())))))
(371 #f 370 55 (#(4 45 #(r x) ())))
(372 record-predicate 354 62 (#(4 7 #(rt) ())))
(373 #f 372 5 (#(4 26 #(x) ())))
(374 define-record-discloser 354 66 (#(4 45 #(rt proc) ())))
(375 disclose-record 354 70 (#(4 50 #(r) (#(19 50 #(p) ())))))
(376 default-record-discloser 354 74 (#(4 21 #(r) ())))
(377 #f 354 96 (#(4 91 #(obj) ())))
(380 thread-dynamic-env 379 33 (#(4 12 #(r##22) ())))
(381 current-thread 379 37 ())
(382 set-current-thread! 379 41 (#(4 8 #(thread) ())))
(383 get-dynamic-env 379 45 ())
(384 set-dynamic-env! 379 49 (#(4 14 #(env) ())))
(385 initialize-dynamic-state! 379 53 ())
(386 with-dynamic-env 379 57 (#(4 49 #(env thunk) (#(13 49 #(saved-env) (#(38 46 #(x) ())))))))
(387 #f 386 23 (#(5 21 #(results) ())))
(388 empty-dynamic-env 379 61 ())
(389 fluid-top-level-value 379 97 (#(4 12 #(r##23) ())))
(390 set-fluid-top-level-value! 379 101 (#(4 15 #(r##23 new##24) ())))
(391 fluid 379 105 (#(4 44 #(f) (#(25 44 #(probe) ())))))
(392 set-fluid! 379 109 (#(4 50 #(f val) (#(25 50 #(probe) ())))))
(393 let-fluid 379 113 (#(4 30 #(f val thunk) ())))
(394 let-fluids 379 117 (#(5 28 #(args) (#(9 28 #(loop) ())))))
(395 loop 394 10 (#(4 66 #(args env) ())))
(396 fluid-lookup 379 121 (#(4 40 #(env f) (#(21 40 #(probe) ())))))
(398 dynamic-wind 397 1 (#(4 94 #(in body out) (#(78 94 #(results) ()) #(35 67 #(here) ())))))
(399 #f 398 69 ())
(400 call-with-current-continuation 397 5 (#(4 10 #(proc) ())))
(401 #f 400 7 (#(4 20 #(cont) (#(13 20 #(env) ())))))
(402 #f 401 14 (#(5 57 #(results) ())))
(403 #f 402 54 ())
(404 point-parent 397 41 (#(4 12 #(r##25) ())))
(405 point-dynamic-env 397 45 (#(4 12 #(r##26) ())))
(406 point-out 397 49 (#(4 12 #(r##27) ())))
(407 point-in 397 53 (#(4 12 #(r##28) ())))
(408 point-depth 397 57 (#(4 12 #(r##29) ())))
(409 #f 397 68 (#(4 19 #(p) ())))
(412 get-dynamic-point 397 114 ())
(413 env-dynamic-point 397 118 (#(4 14 #(env) ())))
(414 let-dynamic-point 397 122 (#(4 30 #(point thunk) ())))
(415 travel-to-point! 397 126 (#(4 121 #(here target) ())))
(417 current-input-port 416 37 ())
(418 current-output-port 416 41 ())
(419 error-output-port 416 45 ())
(420 with-initial-ports 416 49 (#(4 29 #(in out thunk) ())))
(421 call-with-mumble-file 416 53 (#(4 7 #(open close) ())))
(422 #f 421 5 (#(4 21 #(string proc) (#(8 21 #(port) ())))))
(423 #f 422 9 ())
(424 #f 422 12 ())
(425 #f 422 15 ())
(426 with-input-from-file 416 89 (#(4 14 #(string thunk) ())))
(427 #f 426 8 (#(4 30 #(port) ())))
(428 with-output-to-file 416 93 (#(4 14 #(string thunk) ())))
(429 #f 428 8 (#(4 30 #(port) ())))
(430 newline 416 97 (#(5 21 #(port-option) ())))
(431 output-port-option 416 101 (#(4 57 #(port-option) ())))
(432 input-port-option 416 105 (#(4 57 #(port-option) ())))
(434 write 433 1 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(435 recur 434 26 (#(4 17 #(obj) ())))
(436 recurring-write 433 5 (#(4 156 #(obj port recur) ())))
(437 write-boolean 433 9 (#(4 20 #(mumble port) ())))
(438 write-number 433 13 (#(4 23 #(n port) ())))
(439 write-char-literal 433 17 (#(4 46 #(obj port) (#(18 46 #(probe) ())))))
(440 character-name 433 21 (#(4 30 #(char) ())))
(441 write-string-literal 433 25 (#(4 33 #(obj port) (#(17 33 #(len) (#(21 33 #(loop##30) ())))))))
(442 loop##30 441 22 (#(4 98 #(i) (#(36 86 #(c) (#(49 64 #(temp##31) ())))))))
(443 write-list 433 29 (#(4 92 #(obj port recur) (#(66 84 #(loop) ())))))
(444 loop 443 67 (#(4 93 #(l n) ())))
(445 quotation? 433 33 (#(4 52 #(obj) ())))
(446 write-vector 433 37 (#(4 73 #(obj port recur) (#(21 65 #(z) (#(51 63 #(loop) ())))))))
(447 loop 446 52 (#(4 66 #(i) (#(21 66 #(temp##32) ())))))
(448 write-other 433 41 (#(4 180 #(obj port recur) (#(18 180 #(temp##33) (#(28 77 #(l) ())))))))
(449 #f 448 57 (#(4 19 #(x) ())))
(450 display-type-name 433 45 (#(4 114 #(name port) (#(19 104 #(s) (#(26 104 #(len) (#(82 94 #(loop##34) ())))))))))
(451 loop##34 450 83 (#(4 62 #(i) (#(21 62 #(temp##35) ())))))
(452 display 433 49 (#(7 37 #(obj port-option) (#(21 37 #(port) (#(25 37 #(recur) ())))))))
(453 recur 452 26 (#(4 44 #(obj) ())))
(455 condition-supertypes 454 5 (#(4 14 #(type) ())))
(456 define-condition-type 454 9 (#(4 42 #(type supertypes) ())))
(457 #f 456 19 (#(4 48 #(sup) (#(18 48 #(temp##36) ())))))
(458 condition-predicate 454 13 (#(4 7 #(name) ())))
(459 #f 458 5 (#(4 59 #(c) (#(28 57 #(probe) ())))))
(460 condition? 454 17 (#(4 39 #(x) ())))
(461 make-exception 454 149 (#(4 19 #(opcode args) ())))
(462 #f #f #f (#(374 384 #(number-sharp-macro) ()) #(110 141 #(sub-read-constituent) ()) #(90 100 #(sub-read-whitespace) ())))
(463 read 462 1 (#(5 32 #(port-option) (#(19 32 #(port) (#(23 32 #(loop) ())))))))
(464 loop 463 24 (#(16 81 #(form) ())))
(465 sub-read-carefully 462 5 (#(4 64 #(port) (#(18 64 #(form) ())))))
(466 make-reader-token 462 22 (#(4 13 #(message) ())))
(467 reader-token? 462 26 (#(4 23 #(form) ())))
(468 sub-read 462 56 (#(4 35 #(port) (#(10 35 #(c) ())))))
(469 #f 462 63 (#(4 17 #(c port) ())))
(470 set-standard-syntax! 462 78 (#(4 27 #(char terminating? reader) ())))
(471 sub-read-whitespace 462 86 (#(4 13 #(c port) ())))
(472 #f 462 91 (#(4 15 #(c) ())))
(473 sub-read-constituent 462 106 (#(4 26 #(c port) ())))
(474 #f 462 111 (#(4 16 #(c) ())))
(475 set-standard-read-macro! 462 143 (#(4 17 #(c terminating? proc) ())))
(476 sub-read-list 462 147 (#(4 130 #(c port) (#(18 130 #(form) (#(69 109 #(last-form) (#(83 109 #(another-form) ())))))))))
(477 #f 462 179 (#(4 11 #(c port) ())))
(478 #f 462 197 (#(4 25 #(c port) ())))
(479 #f 462 215 (#(4 25 #(c port) ())))
(480 #f 462 233 (#(4 76 #(c port) (#(12 76 #(next) (#(57 76 #(keyword) ())))))))
(481 #f 462 251 (#(4 25 #(c port) (#(10 25 #(loop) ())))))
(482 loop 481 11 (#(4 162 #(l i) (#(10 162 #(c) (#(43 126 #(c) (#(73 88 #(temp##37) ())))))))))
(483 #f 462 269 (#(4 25 #(c port) ())))
(484 gobble-line 462 277 (#(4 17 #(port) (#(8 17 #(loop) ())))))
(485 loop 484 9 (#(8 32 #(c) ())))
(486 define-sharp-macro 462 285 (#(4 21 #(c proc) ())))
(487 #f 462 298 (#(4 99 #(c port) (#(12 99 #(c) (#(49 99 #(c) (#(66 99 #(probe) ())))))))))
(488 #f 462 313 (#(4 9 #(c port) ())))
(489 #f 462 328 (#(4 10 #(c port) ())))
(490 #f 462 343 (#(4 123 #(c port) (#(13 123 #(c) (#(57 119 #(name) (#(91 119 #(temp##38) ())))))))))
(491 #f 462 358 (#(4 26 #(c port) ())))
(492 number-sharp-macro 462 370 (#(4 56 #(c port) (#(21 56 #(string) (#(35 56 #(temp##39) ())))))))
(493 #f 462 375 (#(4 14 #(c) ())))
(494 sub-read-token 462 386 (#(4 41 #(c port) (#(8 41 #(loop) ())))))
(495 loop 494 9 (#(4 78 #(l n) (#(10 78 #(c) (#(20 37 #(temp##40) ())))))))
(496 parse-token 462 390 (#(4 163 #(string port) (#(99 156 #(temp##44) ()) #(18 82 #(c) (#(32 82 #(temp##43) (#(49 82 #(temp##42) (#(66 82 #(temp##41) ())))))))))))
(497 reading-error 462 424 (#(7 41 #(port message irritants) ())))
(499 table-set-procedure 498 33 (#(4 12 #(r##45) ())))
(500 set-table-set-procedure! 498 37 (#(4 15 #(r##45 new##46) ())))
(501 table-ref-procedure 498 41 (#(4 12 #(r##47) ())))
(502 set-table-ref-procedure! 498 45 (#(4 15 #(r##47 new##48) ())))
(503 table-data 498 49 (#(4 12 #(r##49) ())))
(504 set-table-data! 498 53 (#(4 15 #(r##49 new##50) ())))
(505 table-size 498 57 (#(4 12 #(r##51) ())))
(506 set-table-size! 498 61 (#(4 15 #(r##51 new##52) ())))
(507 table-hash-function 498 65 (#(4 12 #(r##53) ())))
(508 make-table 498 82 (#(5 46 #(maybe-hash-function) (#(27 46 #(hash) ())))))
(509 table-ref 498 86 (#(4 19 #(table key) ())))
(510 table-set! 498 90 (#(4 22 #(table key val) ())))
(511 next-table-size 498 102 (#(4 62 #(count) (#(17 62 #(new-size) ())))))
(512 new-entry 498 110 (#(4 47 #(key val others) (#(14 47 #(v) ())))))
(513 get-entry 498 114 (#(4 51 #(entries key) ())))
(514 set-entry! 498 118 (#(4 59 #(entries key val) ())))
(515 for-each-entry 498 122 (#(4 67 #(proc entries) (#(21 65 #(data) ())))))
(516 linear-table-ref 498 126 (#(4 19 #(table key) ())))
(517 linear-table-set! 498 130 (#(4 68 #(table key val) (#(14 68 #(entries) ())))))
(518 linear-table-inc! 498 134 (#(4 102 #(table) (#(18 102 #(count) (#(48 102 #(data) ())))))))
(519 table-expand-table! 498 138 (#(4 30 #(table size) ())))
(520 table-enter-entries! 498 142 (#(4 14 #(table entries) ())))
(521 #f 520 5 (#(4 17 #(key val) ())))
(522 hash-table-ref 498 146 (#(4 49 #(table key) (#(14 49 #(data) ())))))
(523 hash-table-set! 498 150 (#(4 108 #(table key val) (#(14 108 #(data) (#(39 108 #(h) (#(49 108 #(entries) ())))))))))
(524 hash-table-inc! 498 154 (#(4 97 #(table) (#(18 97 #(count) (#(28 97 #(data) (#(35 97 #(size) (#(85 97 #(loop##54) ())))))))))))
(525 loop##54 524 86 (#(4 62 #(i) (#(21 62 #(temp##55) ())))))
(526 table-walk 498 158 (#(4 61 #(proc table) (#(14 61 #(data) (#(45 61 #(size) (#(49 61 #(loop##56) ())))))))))
(527 loop##56 526 50 (#(4 57 #(i) ())))
(528 default-table-hash-function 498 162 (#(4 103 #(obj) ())))
(530 syntax? 529 1 (#(4 59 #(d) ())))
(531 name? 529 5 (#(4 26 #(thing) (#(11 26 #(temp##57) ())))))
(532 operator-uid-maybe 529 45 (#(4 12 #(r##58) ())))
(533 set-operator-uid-maybe! 529 49 (#(4 15 #(r##58 new##59) ())))
(534 operator-transform 529 53 (#(4 12 #(r##60) ())))
(535 set-operator-transform! 529 57 (#(4 15 #(r##60 new##61) ())))
(536 operator-name 529 61 (#(4 12 #(r##62) ())))
(537 operator-type 529 65 (#(4 12 #(r##63) ())))
(538 #f 529 89 (#(4 19 #(s) ())))
(539 get-operator 529 97 (#(7 189 #(name type-option) (#(44 189 #(type probe) (#(174 189 #(op) ()) #(146 157 #(temp##64) ()) #(68 133 #(previous-type) ())))))))
(540 operator-uid 529 101 (#(4 120 #(op) (#(14 120 #(temp##65) (#(27 120 #(uid) ())))))))
(541 make-compilator-table 529 123 (#(4 23 #(default) (#(14 23 #(v) ())))))
(542 #f 541 15 (#(4 36 #(name type proc) ())))
(543 #f 541 18 (#(4 21 #(s) ())))
(544 transform-id 529 159 (#(4 12 #(r##66) ())))
(545 transform-source 529 163 (#(4 12 #(r##67) ())))
(546 transform-aux-names 529 167 (#(4 12 #(r##68) ())))
(547 transform-type 529 171 (#(4 12 #(r##69) ())))
(548 transform-env 529 175 (#(4 12 #(r##70) ())))
(549 transform-procedure 529 179 (#(4 12 #(r##71) ())))
(550 #f 529 203 (#(4 19 #(m) ())))
(551 maybe-transform 529 211 (#(4 42 #(den exp lookup) ())))
(552 #f 551 31 (#(4 66 #(name1 name2) ())))
(553 transform 529 215 (#(4 46 #(den exp lookup) (#(24 46 #(new-exp) ())))))
(554 make-name-generator 529 219 (#(4 12 #(env parent-name) (#(9 12 #(alist) ())))))
(555 #f 554 10 (#(4 113 #(symbol) (#(28 85 #(probe) (#(64 85 #(new-name) ())))))))
(556 same-denotation? 529 223 (#(4 73 #(x y) (#(21 73 #(temp##72) ())))))
(557 same-transform? 529 227 (#(4 68 #(x y) ())))
(558 generated-pname 529 263 (#(4 12 #(r##73) ())))
(559 set-generated-pname! 529 267 (#(4 15 #(r##73 new##74) ())))
(560 generated-parent-name 529 271 (#(4 12 #(r##75) ())))
(561 generated-env 529 275 (#(4 12 #(r##76) ())))
(562 generated-symbol 529 279 (#(4 12 #(r##77) ())))
(563 #f 529 303 (#(4 19 #(name) ())))
(564 generate-name 529 311 (#(4 20 #(symbol env parent-name) ())))
(565 name->symbol 529 315 (#(4 105 #(name) (#(24 105 #(temp##78) (#(37 105 #(uid) (#(91 105 #(pname) ())))))))))
(566 name-hash 529 323 (#(4 66 #(name) ())))
(567 desyntaxify 529 327 (#(4 314 #(thing) (#(240 259 #(new) (#(244 259 #(loop) ()))) #(171 212 #(x y) ()) #(22 82 #(temp##82) (#(39 82 #(temp##81) (#(53 82 #(temp##80) (#(69 82 #(temp##79) ())))))))))))
(568 loop 567 245 (#(4 101 #(i same?) (#(56 101 #(x) ())))))
(569 make-immutable 529 331 (#(4 10 #(thing) ())))
(570 normalize-definition 529 383 (#(4 123 #(form) (#(15 123 #(pat) ())))))
(571 make-define 529 387 (#(4 25 #(var rhs) ())))
(572 define? 529 391 (#(4 24 #(form) ())))
(573 literal? 529 403 (#(4 55 #(exp) (#(10 55 #(temp##85) (#(24 55 #(temp##84) (#(39 55 #(temp##83) ())))))))))
(574 number-of-required-args 529 407 (#(4 23 #(formals) (#(8 23 #(loop##86) ())))))
(575 loop##86 574 9 (#(4 41 #(l i) ())))
(576 n-ary? 529 411 (#(4 36 #(formals) ())))
(577 normalize-formals 529 415 (#(4 54 #(formals) ())))
(579 make-population 578 1 ())
(580 add-to-population! 578 5 (#(4 59 #(x pop) ())))
(581 population-reduce 578 9 (#(4 29 #(cons nil pop) (#(8 29 #(loop##87) ())))))
(582 loop##87 581 9 (#(4 75 #(l prev m) (#(40 70 #(w) ())))))
(583 population->list 578 13 (#(4 17 #(pop) ())))
(584 walk-population 578 17 (#(4 16 #(proc pop) ())))
(585 #f 584 5 (#(4 11 #(thing junk) ())))
(587 template-code 586 5 (#(4 12 #(tem) ())))
(588 template-info 586 9 (#(4 12 #(tem) ())))
(589 set-template-code! 586 13 (#(4 15 #(tem cv) ())))
(590 set-template-info! 586 17 (#(4 15 #(tem info) ())))
(592 continuation-cont 591 1 (#(4 12 #(c) ())))
(593 continuation-pc 591 5 (#(4 12 #(c) ())))
(594 continuation-template 591 9 (#(4 12 #(c) ())))
(595 continuation-env 591 13 (#(4 12 #(c) ())))
(596 continuation-arg 591 21 (#(4 16 #(c i) ())))
(597 continuation-arg-count 591 25 (#(4 13 #(c) ())))
(598 continuation-parent 591 29 (#(4 133 #(a) (#(18 133 #(b) (#(87 108 #(loop) ())))))))
(599 loop 598 88 (#(4 51 #(env) (#(22 51 #(temp##88) ())))))
(601 enumerand->name 600 1 (#(4 12 #(e e-type) ())))
(602 name->enumerand 600 5 (#(4 20 #(e e-type) (#(8 20 #(loop) ())))))
(603 loop 602 9 (#(4 45 #(i) ())))
(604 definitely-name->enumerand 600 9 (#(4 57 #(e e-type e-type-name) (#(21 57 #(temp##89) ())))))
(608 #f #f #f (#(91 107 #(interrupt/keyboard) ())))
(609 usual-exception-handler 608 1 (#(7 22 #(opcode args) ())))
(610 define-exception-handler 608 5 (#(4 15 #(opcode proc) ())))
(611 signal-exception 608 9 (#(4 23 #(opcode args) ())))
(612 initialize-exceptions! 608 22 ())
(613 #f 608 48 (#(4 34 #(opcode args) ())))
(614 make-opcode-generic! 608 56 (#(4 29 #(opcode table) ())))
(615 really-signal-condition 608 60 (#(4 29 #(condition) (#(8 29 #(loop) ())))))
(616 loop 615 9 (#(4 17 #(hs) ())))
(617 #f 616 8 ())
(618 with-handler 608 64 (#(4 45 #(h thunk) ())))
(619 #f 608 96 (#(4 67 #(condition punt) ())))
(620 ignore-errors 608 110 (#(4 11 #(thunk) ())))
(621 #f 620 5 (#(4 14 #(k) ())))
(622 #f 621 5 (#(4 29 #(c next) ())))
(623 #f 608 136 (#(4 112 #(obj) ())))
(624 continuation-preview 608 144 (#(4 74 #(c) ())))
(626 #f 625 23 (#(4 55 #(opcode args) (#(24 55 #(probe) ())))))
(627 define-wna-handler 625 35 (#(4 21 #(proc handler) ())))
(628 wna-lose 625 58 (#(4 26 #(proc args) ())))
(629 #f 625 69 (#(4 17 #(args) ())))
(630 #f 625 84 (#(4 17 #(args) ())))
(631 #f 625 99 (#(4 59 #(args) ())))
(632 #f 625 114 (#(4 59 #(args) ())))
(633 #f 625 129 (#(4 59 #(args) ())))
(634 #f 625 144 (#(4 60 #(args) ())))
(635 #f 625 159 (#(4 63 #(args) (#(46 61 #(recur) ())))))
(636 recur 635 47 (#(4 46 #(l) ())))
(637 #f 625 174 (#(4 36 #(args) ())))
(638 #f 625 189 (#(4 36 #(args) ())))
(639 #f 625 204 (#(4 36 #(args) ())))
(640 #f 625 219 (#(4 71 #(args) ())))
(641 #f 625 234 (#(4 17 #(args) ())))
(642 comparison-wna 625 242 (#(4 7 #(compare) ())))
(643 #f 642 5 (#(4 84 #(args) (#(53 74 #(loop) ())))))
(644 loop 643 54 (#(4 60 #(x args) (#(18 60 #(y args) ())))))
(646 signature-item-name 645 1 (#(4 20 #(item) ())))
(647 signature-item-type 645 5 (#(4 23 #(item) ())))
(648 variable-signature-item? 645 9 (#(4 24 #(item) ())))
(649 syntax-signature-item? 645 13 (#(4 20 #(item) ())))
(650 really-signature-references 645 49 (#(4 12 #(r##90) ())))
(651 really-signature-ref 645 53 (#(4 12 #(r##91) ())))
(652 really-signature-items 645 57 (#(4 12 #(r##92) ())))
(653 make-signature 645 74 (#(4 23 #(items-thunk ref) ())))
(654 make-simple-signature 645 78 (#(4 48 #(items) (#(25 43 #(table) ())))))
(655 #f 654 5 ())
(656 #f 654 30 (#(4 35 #(item) ())))
(657 #f 654 41 (#(4 14 #(name) ())))
(658 make-compound-signature 645 82 (#(5 40 #(sigs) (#(22 40 #(sig) ())))))
(659 #f 658 10 ())
(660 #f 658 13 (#(4 20 #(name) (#(8 20 #(loop) ())))))
(661 loop 660 9 (#(4 54 #(sigs) (#(36 54 #(temp##93) ())))))
(662 #f 658 27 (#(4 14 #(s) ())))
(663 signature-items 645 86 (#(4 31 #(sig) ())))
(664 signature-ref 645 90 (#(4 34 #(sig name) ())))
(665 signature-references 645 94 (#(4 30 #(sig) ())))
(666 note-reference-to-signature! 645 98 (#(4 32 #(sig thing) ())))
(667 structure-clients 645 134 (#(4 12 #(r##94) ())))
(668 structure-package 645 138 (#(4 12 #(r##95) ())))
(669 structure-signature 645 142 (#(4 12 #(r##96) ())))
(670 structure-name 645 146 (#(4 12 #(r##97) ())))
(671 #f 645 170 (#(4 32 #(s) ())))
(672 make-structure 645 178 (#(4 86 #(name sig package) (#(48 86 #(struct) ())))))
(673 structure-unstable? 645 182 (#(4 17 #(struct) ())))
(674 structure-exports? 645 186 (#(4 19 #(s name) ())))
(675 undefined-exports 645 190 (#(4 56 #(s) (#(17 56 #(p names) ())))))
(676 #f 675 22 (#(4 58 #(item) (#(18 58 #(name) ())))))
(677 verify-later! 645 194 (#(4 89 #(thunk) (#(22 85 #(loser) (#(40 55 #(temp##98) ())))))))
(678 package-system-sentinel 645 224 (#(7 41 #(drain) (#(15 30 #(check) ())))))
(679 drain 678 3 (#(4 17 #(flu check) (#(8 17 #(loop) ())))))
(680 loop 679 9 (#(16 81 #(losers) (#(43 79 #(loser) ())))))
(681 check 678 16 (#(4 68 #(loser) ())))
(682 #f 681 19 (#(4 75 #(p) (#(30 75 #(ps) ())))))
(683 package-open! 645 228 (#(4 87 #(p struct-thunk) (#(56 85 #(thunk) ())))))
(684 #f 683 63 ())
(685 check-structure 645 232 (#(4 64 #(s) (#(18 64 #(names) ())))))
(687 package-uid 686 33 (#(4 12 #(r##99) ())))
(688 package-loaded? 686 37 (#(4 12 #(r##100) ())))
(689 set-package-loaded?! 686 41 (#(4 15 #(r##100 new##101) ())))
(690 package-clauses 686 45 (#(4 12 #(r##102) ())))
(691 package-file-name 686 49 (#(4 12 #(r##103) ())))
(692 package-structures 686 53 (#(4 12 #(r##104) ())))
(693 package-cached 686 57 (#(4 12 #(r##105) ())))
(694 package-seen 686 61 (#(4 12 #(r##106) ())))
(695 package-locations 686 65 (#(4 12 #(r##107) ())))
(696 package-integrate? 686 69 (#(4 12 #(r##108) ())))
(697 set-package-integrate?! 686 73 (#(4 15 #(r##108 new##109) ())))
(698 package-for-syntax-promise 686 77 (#(4 12 #(r##110) ())))
(699 package-evaluator 686 81 (#(4 12 #(r##111) ())))
(700 package-definitions 686 85 (#(4 12 #(r##112) ())))
(701 package-accesses-thunk 686 89 (#(4 12 #(r##113) ())))
(702 package-opens-thunk 686 93 (#(4 12 #(r##114) ())))
(703 set-package-opens-thunk! 686 97 (#(4 15 #(r##114 new##115) ())))
(704 package-opens-really 686 101 (#(4 12 #(r##116) ())))
(705 set-package-opens! 686 105 (#(4 15 #(r##116 new##117) ())))
(706 #f 686 129 (#(4 56 #(p) (#(18 56 #(name) ())))))
(707 make-package 686 137 (#(4 98 #(opens-thunk accesses-thunk evaluator for-syntax-promise dir clauses) ())))
(708 package-for-syntax 686 141 (#(4 13 #(p) ())))
(709 new-package-uid 686 145 (#(7 18 #(uid) ())))
(710 package-name 686 163 (#(4 19 #(package) ())))
(711 set-package-name! 686 167 (#(4 22 #(package name) ())))
(712 make-simple-package 686 171 (#(7 139 #(opens evaluator efs-promise name-option) (#(85 139 #(p) ())))))
(713 #f 712 61 ())
(714 #f 712 64 ())
(715 package-opens 686 179 (#(4 42 #(p) (#(14 42 #(temp##118) ())))))
(716 package-accesses 686 183 (#(4 13 #(p) ())))
(717 package-lookup 686 187 (#(4 33 #(p name) ())))
(718 proj2 686 191 (#(4 7 #(q op) ())))
(719 package-lookup-1 686 195 (#(4 227 #(p name integrate? need-value?) (#(26 227 #(probe) (#(45 171 #(syn?) (#(87 153 #(temp##121) (#(101 153 #(temp##120) (#(128 144 #(temp##119) ())))))))))))))
(720 #f 719 218 (#(4 96 #(q type) (#(13 96 #(syn?) (#(46 58 #(temp##122) ())))))))
(721 #f 720 62 (#(4 29 #(q info) ())))
(722 #f 719 221 ())
(723 package-check-variable 686 199 (#(4 33 #(p name) ())))
(724 #f 723 5 (#(4 77 #(q probe) ())))
(725 package-check-assigned 686 203 (#(4 33 #(p name) ())))
(726 #f 725 5 (#(4 174 #(q probe) (#(85 100 #(temp##123) ())))))
(727 package-define! 686 207 (#(4 60 #(p name new) ())))
(728 maybe-note-redefinition 686 211 (#(4 155 #(p name seen new) (#(97 153 #(old-description new-description doing) ())))))
(729 compatible? 686 215 (#(4 76 #(new seen) (#(21 76 #(temp##124) ())))))
(730 exporting-package 686 219 (#(4 29 #(p name succeed fail) (#(8 29 #(loop) ())))))
(731 loop 730 9 (#(4 71 #(opens) (#(37 71 #(type) ())))))
(732 not-variable 686 223 (#(4 38 #(name d) ())))
(733 assume-denotation 686 227 (#(4 30 #(p name info) ())))
(734 probe-package 686 231 (#(4 107 #(p name) (#(26 107 #(probe) ())))))
(735 #f 734 98 (#(4 14 #(q type) ())))
(736 #f 734 101 ())
(737 package-ensure-defined! 686 235 (#(4 205 #(p name) (#(26 205 #(probe) (#(184 205 #(loc) ()) #(83 181 #(new cached) (#(141 154 #(loop) ())))))))))
(738 loop 737 142 (#(4 21 #(p) ())))
(739 #f 738 12 (#(4 51 #(p type) (#(27 51 #(probe) ())))))
(740 #f 738 15 ())
(741 for-each-definition 686 239 (#(4 19 #(proc p) ())))
(742 initialize-package! 686 243 (#(4 64 #(p) (#(24 44 #(opens) ())))))
(743 #f 742 35 (#(4 35 #(struct) ())))
(744 #f 742 46 (#(4 23 #(name+struct) ())))
(745 reinitialize-package! 686 247 (#(4 15 #(p) ())))
(746 package-define-access! 686 251 (#(4 65 #(p name struct) (#(14 65 #(sig) ())))))
(747 transform-for-structure-ref 686 255 (#(4 7 #(sig) ())))
(748 #f 747 5 (#(4 126 #(exp rename compare) (#(33 116 #(name) ())))))
(749 initialize-reified-package! 686 259 (#(4 43 #(p names statics locs) (#(27 43 #(end loc-table den-table) (#(31 43 #(loop##125) ())))))))
(750 loop##125 749 32 (#(4 184 #(i) (#(13 184 #(temp##127) (#(54 172 #(name static loc) (#(113 170 #(temp##126) ())))))))))
(751 location-from-id 686 263 (#(4 20 #(loc) ())))
(752 binding-description-string 686 267 (#(4 75 #(d) ())))
(753 note-undefined! 686 284 (#(4 35 #(p name) (#(18 35 #(note) ())))))
(754 noting-undefined-variables 686 288 (#(4 62 #(p thunk) (#(9 62 #(losers) (#(30 41 #(temp##128) ())))))))
(755 #f 754 39 (#(4 101 #(p name) (#(21 101 #(probe) ())))))
(756 #f 754 56 (#(13 31 #(result) ())))
(757 #f 756 18 (#(4 189 #(p+names) (#(12 189 #(q) (#(32 189 #(names) ())))))))
(758 #f 757 17 (#(4 23 #(name) ())))
(759 #f 757 156 (#(4 29 #(name) ())))
(761 flush-location-names 760 15 ())
(762 make-new-location 760 19 (#(4 60 #(p name) (#(15 60 #(uid) ())))))
(763 new-location-uid 760 23 (#(7 18 #(uid) ())))
(764 location-info 760 27 (#(4 31 #(loc) (#(12 31 #(id) ())))))
(765 copy-location-info! 760 31 (#(4 41 #(from to) (#(18 41 #(probe) ())))))
(766 location-name 760 35 (#(4 32 #(loc) (#(18 32 #(probe) ())))))
(767 location-package-name 760 39 (#(4 39 #(loc) (#(18 39 #(probe) ())))))
(768 copy-shadowed-contents! 760 43 (#(4 86 #(import loc) ())))
(769 package-lookup-location 760 47 (#(4 92 #(p name assign?) ())))
(770 #f 769 83 (#(4 78 #(q type) ())))
(771 #f 769 86 ())
(772 lookup-imported-location 760 51 (#(4 104 #(p name cache?) (#(69 104 #(loc) ())))))
(773 #f 772 57 (#(4 27 #(q type) ())))
(774 #f 772 60 ())
(775 package-find-location 760 55 (#(4 112 #(p name assign?) ())))
(776 #f 775 100 (#(4 17 #(q type) ())))
(777 #f 775 103 ())
(778 get-location 760 59 (#(4 118 #(p name assign?) (#(14 118 #(table) (#(85 118 #(loc) ()) #(35 82 #(temp##129) (#(60 82 #(new) ())))))))))
(779 location-ever-assigned? 760 73 (#(4 17 #(loc) ())))
(780 verify-package 760 77 (#(4 23 #(p) ())))
(781 verify-package-undefineds 760 81 (#(4 151 #(p) (#(25 151 #(newly-defined defs locs) ())))))
(782 #f 781 30 (#(4 127 #(name prev) (#(86 125 #(new) ())))))
(783 #f 781 142 (#(4 68 #(loser) (#(18 68 #(name prev) ())))))
(784 verify-package-cached 760 85 (#(4 143 #(p) (#(17 143 #(newly-moved cached) ())))))
(785 #f 784 22 (#(4 63 #(name prev) (#(24 63 #(new) ())))))
(786 #f 784 134 (#(4 51 #(loser) (#(18 51 #(name prev) ())))))
(787 cope-with-mutation 760 89 (#(4 88 #(p name new prev) (#(24 88 #(replacement) ())))))
(788 *shadow-action* 760 93 (#(4 23 #(prev uids new rep) ())))
(789 set-shadow-action! 760 97 (#(4 9 #(proc) ())))
(790 packages-seeing-location 760 101 (#(4 33 #(p name loc) (#(9 33 #(losers) (#(17 29 #(recur) ())))))))
(791 recur 790 18 (#(4 97 #(p) ())))
(792 #f 791 81 (#(4 39 #(struct) ())))
(793 reset-packages-state! 760 105 ())
(794 undefined-variables 760 109 (#(4 32 #(p) (#(9 32 #(names) ())))))
(795 #f 794 14 (#(4 34 #(name loc) ())))
(796 package-define-location! 760 113 (#(4 45 #(p name loc) ())))
(798 environment-ref 797 1 (#(4 256 #(package name) (#(21 256 #(probe) (#(87 228 #(loc) (#(168 183 #(temp##130) ())))))))))
(799 environment-set! 797 5 (#(4 132 #(package name value) (#(21 132 #(probe) ())))))
(800 environment-define! 797 9 (#(4 25 #(package name value) ())))
(801 *structure-ref 797 13 (#(4 82 #(struct name) ())))
(802 interaction-environment 797 29 ())
(803 set-interaction-environment! 797 33 (#(4 41 #(p) ())))
(804 with-interaction-environment 797 37 (#(4 57 #(p thunk) ())))
(805 scheme-report-environment 797 41 (#(4 32 #(n) ())))
(806 set-scheme-report-environment! 797 52 (#(4 13 #(repnum env) ())))
(807 make-package-for-syntax 797 56 (#(4 17 #(eval structs) (#(8 17 #(recur) ())))))
(808 recur 807 9 ())
(809 #f 808 13 ())
(810 #f #f #f (#(67 110 #(op/global op/set-global!) ()) #(20 23 #(assq memv) ())))
(811 shadow-location! 810 5 (#(4 144 #(old p-uids new replacement) (#(115 144 #(bar) ()) #(71 109 #(temp##131) (#(96 109 #(foo) ())))))))
(812 maybe-replace-location 810 21 (#(4 56 #(loc p-uid) (#(21 56 #(probe) (#(34 53 #(bar) (#(38 53 #(loop2) ())))))))))
(813 loop2 812 39 (#(4 71 #(frobs) ())))
(814 deal-with-replaced-variables 810 26 (#(4 7 #(succeed) ())))
(815 #f 814 5 (#(4 10 #(opcode args) ())))
(816 #f 815 7 (#(4 251 #(cont) (#(12 251 #(loc) (#(26 251 #(tem) (#(58 251 #(index) (#(105 223 #(p-uid) (#(123 223 #(new) ()))) #(80 102 #(loop##132) ())))))))))))
(817 loop##132 816 81 (#(4 36 #(env) ())))
(818 #f 810 79 (#(4 47 #(loc more-args) ())))
(819 #f 810 99 (#(4 16 #(loc more-args) ())))
(821 define-usual-macro 820 11 (#(4 23 #(name proc aux-names) ())))
(822 #f 821 11 (#(4 20 #(exp rename compare) ())))
(823 usual-transform-procedure 820 15 (#(4 22 #(name) ())))
(824 for-each-usual-macro 820 19 (#(4 14 #(proc) ())))
(825 #f 824 5 (#(4 23 #(name proc+names) ())))
(826 #f 820 30 (#(7 93 #(rename compare conjuncts) ())))
(827 #f 820 48 (#(7 52 #(rename compare clauses) (#(30 52 #(result) ()) #(15 27 #(recur) ())))))
(828 recur 827 16 (#(4 376 #(clauses) (#(34 371 #(clause more-clauses) (#(198 309 #(temp) ())))))))
(829 #f 820 66 (#(7 204 #(rename compare specs end body) (#(57 204 #(%loop %letrec %lambda %cond) ())))))
(830 #f 829 105 (#(4 32 #(y) ())))
(831 #f 820 84 (#(7 233 #(rename compare specs body) (#(130 211 #(tag specs body %letrec %lambda) ())))))
(832 #f 820 102 (#(7 128 #(rename compare specs body) (#(20 38 #(temp##133) ())))))
(833 #f 820 120 (#(7 156 #(rename compare specs body) (#(51 156 #(unassigned %lambda %set!) ())))))
(834 #f 833 78 (#(4 13 #(spec) ())))
(835 #f 833 143 (#(4 9 #(spec) ())))
(836 #f 820 138 (#(7 152 #(rename compare disjuncts) (#(50 152 #(temp) ())))))
(837 #f 820 156 (#(7 132 #(rename compare key clauses) (#(57 132 #(temp %eqv? %memv %quote) ())))))
(838 #f 837 107 (#(4 158 #(clause) ())))
(839 #f 820 174 (#(4 55 #(rename compare thing) ())))
(840 #f 820 192 (#(4 170 #(rename compare x) (#(32 170 #(%quote %quasiquote %unquote %unquote-splicing %append %cons %list->vector expand-quasiquote finalize-quasiquote descend-quasiquote descend-quasiquote-pair descend-quasiquote-vector interesting-to-quasiquote?) ())))))
(841 interesting-to-quasiquote? 840 33 (#(4 26 #(x marker) ())))
(842 descend-quasiquote-vector 840 38 (#(4 26 #(x level return) ())))
(843 #f 842 20 (#(4 61 #(mode arg) (#(9 61 #(temp##134) ())))))
(844 descend-quasiquote-pair 840 43 (#(4 20 #(x level return) ())))
(845 #f 844 14 (#(4 20 #(car-mode car-arg) ())))
(846 #f 845 14 (#(4 162 #(cdr-mode cdr-arg) ())))
(847 descend-quasiquote 840 48 (#(4 216 #(x level return) ())))
(848 finalize-quasiquote 840 53 (#(4 68 #(mode arg) ())))
(849 expand-quasiquote 840 58 (#(4 17 #(x level) ())))
(850 #f 820 210 (#(4 25 #(rename compare struct name) ())))
(851 #f 820 224 (#(4 37 #(rename compare) ())))
(853 #f 852 8 (#(7 23 #(r c subkeywords rules) ())))
(854 process-rules 852 19 (#(4 389 #(rules subkeywords r c) (#(62 389 #(%append %and %car %cdr %compare %cond %cons %else %eq? %equal? %input %lambda %let %let* %map %pair? %quote %rename %tail %temp make-transformer process-rule process-match process-segment-match process-pattern process-template meta-variables free-meta-variables) ())))))
(855 free-meta-variables 854 63 (#(4 212 #(template rank env free) (#(66 86 #(probe) ())))))
(856 meta-variables 854 68 (#(4 131 #(pattern rank vars) ())))
(857 process-template 854 73 (#(4 403 #(template rank env) (#(144 324 #(vars) (#(190 324 #(x) (#(258 324 #(gen) ()))))) #(35 100 #(probe) ())))))
(858 process-pattern 854 78 (#(4 176 #(pattern path mapit) ())))
(859 #f 858 90 (#(4 67 #(x) ())))
(860 process-segment-match 854 83 (#(4 144 #(input pattern) (#(21 144 #(conjuncts) ())))))
(861 process-match 854 88 (#(4 386 #(input pattern) (#(271 305 #(temp##136) (#(293 305 #(temp##135) ())))))))
(862 process-rule 854 93 (#(4 170 #(rule) (#(64 160 #(pattern template) ())))))
(863 #f 862 99 (#(4 7 #(x) ())))
(864 make-transformer 854 98 (#(4 139 #(rules) ())))
(865 segment-pattern? 852 23 (#(4 53 #(pattern) (#(33 51 #(temp##137) ())))))
(866 segment-template? 852 27 (#(4 41 #(pattern) ())))
(867 find-free-names-in-syntax-rules 852 53 (#(4 39 #(subkeywords rules) (#(10 39 #(meta-variables free-names) (#(24 39 #(loop##139) ())))))))
(868 free-names 867 11 (#(4 167 #(template vars names) (#(39 57 #(temp##138) ())))))
(869 meta-variables 867 16 (#(4 130 #(pattern vars) ())))
(870 loop##139 867 25 (#(4 78 #(rules names) (#(34 73 #(rule) ())))))
(872 namestring 871 1 (#(4 235 #(namelist dir default-type) (#(40 235 #(namelist) (#(82 235 #(subdirs) (#(93 235 #(basename) (#(139 235 #(type) (#(149 160 #(temp##140) ())))))))))))))
(873 #f 872 173 (#(4 23 #(subdir) ())))
(874 namestring-component 871 13 (#(4 74 #(x) ())))
(875 file-name-directory 871 29 (#(4 26 #(filename) ())))
(876 file-name-nondirectory 871 33 (#(4 28 #(filename) ())))
(877 file-nondirectory-position 871 37 (#(4 26 #(filename) (#(8 26 #(loop) ())))))
(878 loop 877 9 (#(4 56 #(i) ())))
(879 string-posq 871 41 (#(4 20 #(thing s) (#(8 20 #(loop) ())))))
(880 loop 879 9 (#(4 53 #(i) ())))
(881 translations 871 49 ())
(882 set-translation! 871 53 (#(4 52 #(from to) (#(21 52 #(probe) ())))))
(883 translate 871 57 (#(4 27 #(name) (#(11 27 #(len) (#(15 27 #(loop) ())))))))
(884 loop 883 16 (#(4 141 #(ts) (#(28 141 #(from) (#(39 141 #(to) (#(46 141 #(k) ())))))))))
(885 #f #f #f (#(76 79 #(operator/begin operator/define operator/define-syntax) ())))
(886 scan-forms 885 14 (#(4 63 #(forms p filename) ())))
(887 #f 886 57 ())
(888 scan-file 885 18 (#(4 47 #(pathname p) (#(23 47 #(filename) (#(37 47 #(truename) ())))))))
(889 #f 888 41 (#(4 64 #(port) ())))
(890 #f 889 58 (#(13 72 #(o-port) (#(51 72 #(result) ()) #(39 48 #(recur) ())))))
(891 recur 890 40 (#(16 54 #(form) ())))
(892 scan-form-list 885 22 (#(4 61 #(forms p) (#(36 61 #(scanned-forms) ())))))
(893 scan-form 885 77 (#(4 205 #(form p) (#(52 198 #(probe) (#(136 164 #(form) ())))))))
(894 #f 893 77 (#(4 14 #(name) ())))
(895 process-define-syntax 885 82 (#(4 245 #(form p) (#(15 245 #(name) (#(38 245 #(source) (#(55 245 #(thing) ())))))))))
(896 eval-for-syntax 885 86 (#(4 33 #(p form) (#(18 33 #(f) ())))))
(897 scan-body 885 90 (#(4 45 #(forms probe lookup cont) ())))
(898 #f 897 36 (#(4 23 #(defs) ())))
(899 #f 898 17 (#(4 26 #(more-defs exps) ())))
(900 #f 897 39 (#(4 29 #(exps) ())))
(901 scan-body-form 885 94 (#(4 191 #(form probe- lookup when-defs when-exps) (#(49 175 #(probe) ())))))
(902 #f 901 119 (#(4 46 #(defs exps) ())))
(903 scan-structures 885 130 (#(4 40 #(structs process-package? package-action) (#(21 40 #(out p-seen s-seen) (#(25 40 #(recur) ())))))))
(904 recur 903 26 (#(4 286 #(s) (#(56 276 #(p) ())))))
(905 #f 904 194 (#(4 15 #(name+struct) ())))
(906 scan-package 885 134 (#(4 52 #(p) (#(12 52 #(stuff optimizers) ())))))
(907 #f 906 20 (#(12 27 #(config-file) ())))
(908 #f 907 13 (#(4 213 #(clause) (#(12 213 #(temp##141) ())))))
(909 #f 908 22 (#(4 76 #(file) (#(44 76 #(file) ())))))
(910 #f 908 125 (#(4 30 #(name) ())))
(911 #f 906 28 (#(4 14 #(opt stuff) ())))
(912 initialize-usual-transforms! 885 138 (#(4 11 #(p) ())))
(913 #f 912 5 (#(4 65 #(name proc aux-names) ())))
(914 integrate-all-primitives! 885 142 (#(4 34 #(p) (#(9 34 #(winners) ())))))
(915 #f 914 14 (#(4 42 #(name info) ())))
(916 #f 914 25 (#(4 29 #(name) ())))
(917 get-optimizer 885 156 (#(4 50 #(name) (#(21 50 #(temp##142) ())))))
(918 #f 917 48 (#(4 7 #(stuff p) ())))
(919 set-optimizer! 885 160 (#(4 17 #(name opt) ())))
(921 new-template-uid 920 1 (#(7 18 #(uid) ())))
(922 template-uid 920 9 ())
(923 set-template-uid! 920 13 (#(4 9 #(uid) ())))
(924 debug-flag-accessor 920 96 (#(4 24 #(name) (#(21 24 #(access) ())))))
(925 #f 924 22 ())
(926 debug-flag-modifier 920 100 (#(4 24 #(name) (#(21 24 #(modify) ())))))
(927 #f 926 22 (#(4 23 #(new) ())))
(928 with-fresh-compiler-state 920 182 (#(4 60 #(thunk) ())))
(929 #f 928 54 ())
(930 #f 929 3 ())
(931 #f 929 6 (#(4 9 #(s) ())))
(932 saving-and-restoring 920 186 (#(4 22 #(fetch store! other thunk) (#(9 22 #(swap) ())))))
(933 swap 932 5 (#(13 31 #(temp) ())))
(935 debug-data-source 934 33 (#(4 12 #(r##143) ())))
(936 set-debug-data-source! 934 37 (#(4 15 #(r##143 new##144) ())))
(937 debug-data-env-maps 934 41 (#(4 12 #(r##145) ())))
(938 set-debug-data-env-maps! 934 45 (#(4 15 #(r##145 new##146) ())))
(939 debug-data-pc-in-parent 934 49 (#(4 12 #(r##147) ())))
(940 debug-data-parent 934 53 (#(4 12 #(r##148) ())))
(941 debug-data-name 934 57 (#(4 12 #(r##149) ())))
(942 debug-data-uid 934 61 (#(4 12 #(r##150) ())))
(943 new-debug-data 934 78 (#(4 32 #(name parent pc-in-parent) ())))
(944 #f 934 89 (#(4 27 #(dd) ())))
(945 debug-data->info 934 97 (#(4 60 #(debug-data) ())))
(946 get-debug-data 934 101 (#(4 46 #(info) ())))
(947 note-debug-data! 934 105 (#(4 28 #(dd) ())))
(948 interesting-debug-data? 934 109 (#(4 119 #(debug-data) (#(28 116 #(temp##153) (#(55 116 #(temp##152) (#(87 116 #(temp##151) ())))))))))
(949 debug-data-names 934 113 (#(4 54 #(info) (#(18 54 #(dd) ())))))
(950 template-debug-data 934 117 (#(4 20 #(tem) ())))
(951 template-id 934 121 (#(4 43 #(tem) (#(18 43 #(info) ())))))
(952 template-name 934 125 (#(4 34 #(tem) (#(18 34 #(probe) ())))))
(953 template-names 934 129 (#(4 20 #(tem) ())))
(955 segment->template 954 13 (#(4 168 #(segment name pc-in-parent) (#(17 168 #(cv) (#(31 168 #(astate) (#(45 168 #(parent-data) (#(93 168 #(name) (#(142 168 #(debug-data) ())))))))))))))
(956 #f 955 162 (#(21 66 #(maps) ())))
(957 segment-data->template 954 17 (#(4 76 #(cv debug-data literals) (#(27 76 #(template) (#(61 76 #(loop##154) ())))))))
(958 loop##154 957 62 (#(4 46 #(lits i) ())))
(959 make-astate 954 21 (#(4 61 #(cv) (#(15 61 #(pc count lits) (#(25 61 #(emit-byte! emit-literal! get-literals get-pc) ())))))))
(960 get-pc 959 26 ())
(961 get-literals 959 31 ())
(962 emit-literal! 959 36 (#(4 120 #(thing) (#(25 115 #(probe) ())))))
(963 emit-byte! 959 41 (#(4 25 #(byte) ())))
(964 emit-byte! 954 25 (#(4 16 #(astate byte) ())))
(965 emit-literal! 954 29 (#(4 16 #(astate thing) ())))
(966 astate-literals 954 33 (#(4 13 #(astate) ())))
(967 astate-pc 954 37 (#(4 13 #(astate) ())))
(968 emit-segment! 954 41 (#(4 14 #(astate segment) ())))
(969 #f 954 48 (#(4 7 #(astate) ())))
(970 instruction 954 55 (#(7 29 #(opcode operands) ())))
(971 #f 970 24 (#(4 31 #(astate) ())))
(972 #f 971 22 (#(4 16 #(operand) ())))
(973 sequentially 954 59 (#(5 18 #(segments) ())))
(974 sequentially-2 954 63 (#(4 47 #(seg1 seg2) ())))
(975 #f 974 42 (#(4 29 #(astate) ())))
(976 instruction-with-literal 954 67 (#(4 13 #(opcode thing) ())))
(977 #f 976 8 (#(4 33 #(astate) ())))
(978 instruction-with-variable 954 71 (#(4 13 #(opcode name den assign?) ())))
(979 #f 978 8 (#(4 37 #(astate) ())))
(980 emit-location! 954 75 (#(4 37 #(astate name den assign?) ())))
(981 instruction-with-template 954 79 (#(4 13 #(opcode segment name) ())))
(982 #f 981 8 (#(4 59 #(astate) ())))
(983 instruction-with-offset 954 83 (#(4 25 #(opcode offset) ())))
(984 instruction-with-offset&byte 954 87 (#(4 28 #(opcode offset byte) ())))
(985 note-source-code 954 120 (#(4 30 #(info segment) ())))
(986 #f 985 22 (#(4 81 #(astate) (#(33 81 #(dd) ())))))
(987 note-environment 954 124 (#(4 30 #(vars segment) ())))
(988 #f 987 22 (#(4 113 #(astate) (#(20 113 #(pc-before) (#(37 113 #(env-maps) ())))))))
(989 emit-with-environment-maps! 954 128 (#(4 30 #(astate segment) ())))
(990 #f 989 24 ())
(992 compile 991 1 (#(4 302 #(exp cenv depth cont) (#(81 181 #(op) ())))))
(993 #f 992 145 (#(4 17 #(name) ())))
(994 compile-variable 991 5 (#(4 171 #(exp cenv depth cont) (#(24 171 #(den) (#(56 143 #(back over) (#(65 135 #(temp##155) ())))))))))
(995 compile-literal 991 9 (#(4 45 #(obj depth cont) ())))
(996 #f 991 17 (#(4 17 #(form cenv depth cont) ())))
(997 #f 991 50 (#(4 30 #(exp cenv depth cont) (#(17 30 #(obj) ())))))
(998 compile-constant 991 58 (#(4 52 #(obj depth cont) ())))
(999 #f 991 72 (#(4 23 #(exp cenv depth cont) ())))
(1000 compile-begin 991 80 (#(4 53 #(exp-list cenv depth cont) (#(34 53 #(dummy) (#(38 53 #(loop) ())))))))
(1001 loop 1000 39 (#(4 110 #(exp-list i) ())))
(1002 #f 991 94 (#(4 151 #(exp cenv depth cont) (#(27 151 #(name val) (#(85 138 #(den) ())))))))
(1003 #f 991 112 (#(4 228 #(exp cenv depth cont) (#(83 228 #(alt-segment) (#(161 228 #(con-segment) ())))))))
(1004 compile-call 991 120 (#(4 98 #(exp cenv depth cont) (#(18 98 #(proc-exp args) ())))))
(1005 lambda-expression? 991 124 (#(4 66 #(exp cenv) ())))
(1006 acceptable-arguments? 991 144 (#(4 86 #(formals args) (#(30 86 #(want-nargs have-nargs) ())))))
(1007 compile-redex 991 148 (#(4 91 #(proc-exp args cenv depth cont) (#(15 91 #(formals) ())))))
(1008 compile-unknown-call 991 152 (#(4 121 #(exp cenv depth cont) (#(108 121 #(call) ())))))
(1009 maybe-push-continuation 991 156 (#(4 70 #(code depth cont) ())))
(1010 push-arguments 991 160 (#(4 29 #(exp cenv depth) (#(8 29 #(recur) ())))))
(1011 recur 1010 9 (#(4 97 #(args depth i) ())))
(1012 push-all-with-names 991 164 (#(4 99 #(exp-list names cenv depth) ())))
(1013 #f 991 178 (#(4 50 #(exp cenv depth cont) ())))
(1014 compile-lambda 991 186 (#(4 118 #(exp cenv) (#(15 118 #(formals) (#(29 118 #(nargs) ())))))))
(1015 compile-lambda-code 991 190 (#(4 208 #(formals body cenv name) (#(149 203 #(vars) (#(166 203 #(cenv) ()))) #(56 130 #(nargs) ())))))
(1016 generate-trap 991 194 (#(7 68 #(cont stuff) ())))
(1017 make-cont 991 198 (#(4 13 #(seg source-info) ())))
(1018 return-cont 991 238 (#(4 13 #(name) ())))
(1019 return-cont? 991 242 (#(4 14 #(cont) ())))
(1020 fall-through-cont 991 246 (#(4 19 #(exp i) ())))
(1021 fall-through-cont? 991 250 (#(4 24 #(cont) ())))
(1022 ignore-values-cont 991 282 (#(4 19 #(exp i) ())))
(1023 ignore-values-cont? 991 286 (#(4 14 #(cont) ())))
(1024 deliver-value 991 290 (#(4 34 #(segment cont) ())))
(1025 named-cont 991 294 (#(4 13 #(name) ())))
(1026 cont-name 991 298 (#(4 30 #(cont) ())))
(1027 compile-body 991 302 (#(4 20 #(body cenv depth cont) ())))
(1028 #f 1027 8 (#(4 17 #(name) ())))
(1029 #f 1027 11 (#(4 17 #(name) ())))
(1030 #f 1027 14 (#(4 69 #(defs exps) ())))
(1031 careful-sequentially 991 306 (#(4 263 #(seg1 seg2 depth cont) ())))
(1032 #f 991 328 (#(4 26 #(exp cenv depth cont) ())))
(1034 #f 1033 11 (#(4 23 #(exp cenv depth cont) ())))
(1035 compile-location 1033 19 (#(4 26 #(den depth cont) ())))
(1036 env-ref? 1033 23 (#(4 11 #(den) ())))
(1037 env-ref-back 1033 27 (#(4 10 #(den cenv) ())))
(1038 env-ref-over 1033 31 (#(4 10 #(den) ())))
(1039 bind-vars 1033 35 (#(4 25 #(names cenv) ())))
(1040 probe-cenv 1033 39 (#(4 17 #(cenv name) ())))
(1041 clookup 1033 43 (#(4 17 #(cenv name) ())))
(1042 clookup-variable 1033 47 (#(4 17 #(cenv name) ())))
(1043 clookup-assigned 1033 51 (#(4 17 #(cenv name) ())))
(1044 really-clookup 1033 55 (#(4 23 #(cenv name p-lookup) (#(8 23 #(next-rib) ())))))
(1045 next-rib 1044 9 (#(4 43 #(cenv back) (#(15 33 #(loop) ())))))
(1046 loop 1045 16 (#(4 70 #(rib over) ())))
(1048 #f 1047 362 (#(455 474 #(cons-instruction) ()) #(155 182 #(loop##156) ()) #(109 112 #(d) ())))
(1049 define-compiler-primitive 1048 77 (#(4 32 #(name nargs n-ary? compilator closed) ())))
(1050 #f 1049 15 (#(4 136 #(exp cenv depth cont) (#(12 136 #(args) ())))))
(1051 #f 1048 89 (#(4 26 #(exp) ())))
(1052 define-closed-compilator 1048 110 (#(4 17 #(name proc) ())))
(1053 #f 1048 132 (#(4 74 #(exp cenv depth cont) ())))
(1054 define-simple-primitive 1048 140 (#(4 23 #(name nargs segment) ())))
(1055 #f 1054 14 (#(4 63 #(exp cenv depth cont) (#(12 63 #(args) ())))))
(1056 #f 1054 17 (#(4 50 #(exp) ())))
(1057 push-all-but-last 1048 144 (#(4 29 #(exp cenv depth) (#(8 29 #(recur) ())))))
(1058 recur 1057 9 (#(4 105 #(args depth i) (#(42 105 #(first-code) ())))))
(1059 loop##156 1048 156 (#(4 149 #(opcode) (#(13 149 #(temp##157) (#(35 137 #(arg-specs) (#(52 137 #(name) (#(74 137 #(nargs) ())))))))))))
(1060 define-data-struct-primitives 1048 226 (#(7 135 #(name predicate maker slots) (#(24 135 #(type) (#(29 135 #(def-prim) (#(119 135 #(loop##158) ())))))))))
(1061 def-prim 1060 25 (#(7 35 #(name nargs op stuff) ())))
(1062 loop##158 1060 120 (#(4 132 #(i slots) (#(13 132 #(temp##159) (#(33 114 #(slot) ())))))))
(1063 #f 1048 234 (#(4 11 #(stuff) ())))
(1064 define-vector-primitives 1048 245 (#(4 194 #(name make length ref set!) (#(21 194 #(type) (#(26 194 #(s-a) (#(31 194 #(def-prim) ())))))))))
(1065 s-a 1064 22 (#(5 33 #(syms) ())))
(1066 def-prim 1064 27 (#(4 29 #(name nargs op) ())))
(1067 #f 1048 253 (#(4 23 #(name) ())))
(1068 #f 1048 268 (#(4 23 #(name) ())))
(1069 #f 1048 283 (#(4 23 #(name) ())))
(1070 #f 1048 334 (#(4 106 #(exp cenv depth cont) (#(12 106 #(args) ())))))
(1071 #f 1048 337 (#(4 92 #(exp) ())))
(1072 #f 1048 358 (#(4 145 #(exp cenv depth cont) (#(12 145 #(proc+args+rest) (#(32 145 #(rest+args) (#(40 145 #(args) (#(75 145 #(args+proc+rest) ())))))))))))
(1073 #f 1048 361 (#(4 50 #(exp) ())))
(1074 #f 1048 382 (#(4 73 #(exp cenv depth cont) (#(12 73 #(args) ())))))
(1075 #f 1048 385 (#(4 11 #(exp) ())))
(1076 #f 1048 406 (#(4 144 #(exp cenv depth cont) (#(12 144 #(args) (#(29 144 #(producer consumer) ())))))))
(1077 #f 1048 409 (#(4 142 #(exp) (#(45 142 #(code) ())))))
(1078 #f 1048 465 (#(4 131 #(exp cenv depth cont) (#(12 131 #(args) ())))))
(1079 #f 1078 88 (#(4 8 #(arg) ())))
(1080 #f 1048 468 (#(4 104 #(exp) ())))
(1081 #f 1048 488 (#(4 47 #(exp) ())))
(1083 compile-form 1082 1 (#(4 44 #(form p) ())))
(1084 compile-file 1082 5 (#(4 73 #(filename p) (#(21 73 #(scanned-forms) (#(32 73 #(o-port) (#(55 73 #(template) ())))))))))
(1085 compile-and-run-forms 1082 9 (#(4 38 #(forms p filename run noisy?) ())))
(1086 compile-and-run-file 1082 13 (#(4 35 #(filename p run noisy?) ())))
(1087 compile-and-run-scanned-forms 1082 17 (#(4 81 #(scanned-forms p filename run noisy?) (#(9 81 #(do-it) (#(14 81 #(do-them) ())))))))
(1088 do-it 1087 5 (#(4 29 #(scanned-form) ())))
(1089 do-them 1087 10 (#(35 47 #(loop##160) ())))
(1090 loop##160 1089 36 (#(4 57 #(scanned-forms) ())))
(1091 #f 1087 20 (#(5 29 #(results) ())))
(1092 #f 1087 34 ())
(1093 #f 1087 70 ())
(1094 compile-scanned-forms 1082 21 (#(4 30 #(scanned-forms p filename noisy?) ())))
(1095 #f 1094 24 (#(54 66 #(recur) ())))
(1096 recur 1095 55 (#(4 102 #(scanned-forms) ())))
(1097 compile-processed-form 1082 25 (#(4 155 #(form p cont noisy?) (#(29 139 #(name) (#(118 139 #(segment) ())))))))
(1098 make-startup-procedure 1082 29 (#(4 135 #(inits resumer) (#(9 135 #(nargs) ())))))
(1099 #f 1098 18 (#(4 65 #(init seg) ())))
(1101 eval 1100 13 (#(4 30 #(form p) ())))
(1102 #f 1101 22 (#(4 14 #(template) ())))
(1103 load 1100 17 (#(7 45 #(filename package-option) (#(35 45 #(p) ())))))
(1104 #f 1103 39 ())
(1105 #f 1104 9 (#(4 14 #(template) ())))
(1106 eval-from-file 1100 21 (#(4 14 #(forms p filename) ())))
(1107 #f 1106 8 ())
(1108 #f 1107 12 (#(4 14 #(template) ())))
(1109 invoke-template 1100 25 (#(4 22 #(template p) ())))
(1110 #f #f #f (#(12 15 #(display newline) ())))
(1111 display-condition 1110 13 (#(4 42 #(c port) ())))
(1112 #f 1111 9 ())
(1113 really-display-condition 1110 18 (#(4 251 #(c port) (#(18 251 #(stuff) (#(91 251 #(stuff) (#(223 239 #(spaces) ()) #(161 196 #(message) ())))))))))
(1114 #f 1113 224 (#(4 50 #(irritant) ())))
(1115 #f 1110 63 (#(4 7 #(c) ())))
(1116 limited-write 1110 71 (#(4 23 #(obj port max-depth max-length) (#(8 23 #(recur) ())))))
(1117 recur 1116 9 (#(4 141 #(obj depth) (#(31 107 #(temp##165) (#(48 107 #(temp##164) (#(62 107 #(temp##163) (#(78 107 #(temp##162) (#(93 107 #(temp##161) ())))))))))))))
(1118 #f 1117 135 (#(4 28 #(escape) (#(20 23 #(count) ())))))
(1119 #f 1118 21 (#(4 103 #(sub) (#(42 56 #(temp##166) ())))))
(1121 command-processor 1120 1 (#(4 37 #(arg) (#(24 37 #(in out) (#(28 37 #(loop) ())))))))
(1122 loop 1121 29 ())
(1123 #f 1122 7 (#(4 14 #(go) ())))
(1124 #f 1123 5 (#(4 92 #(c punt) (#(22 37 #(temp##167) ())))))
(1125 #f 1123 8 (#(31 157 #(form) (#(126 133 #(form) ())))))
(1126 #f 1125 51 ())
(1127 #f 1125 127 ())
(1128 #f 1125 134 (#(5 28 #(results) ())))
(1129 #f 1128 10 (#(4 28 #(result) ())))
(1130 mini-load 1120 5 (#(4 85 #(in) (#(10 85 #(c) (#(66 85 #(filename) ())))))))
(1131 read-string 1120 9 (#(4 23 #(port delimiter?) (#(8 23 #(loop) ())))))
(1132 loop 1131 9 (#(4 80 #(l n) (#(10 80 #(c) (#(20 36 #(temp##168) ())))))))
(1133 #f #f #f (#(17 29 #(loop##169) ())))
(1134 loop##169 1133 18 (#(4 42 #(i) (#(13 42 #(temp##170) ())))))
(1135 #f 1134 28 (#(4 17 #(enabled-int) ())))
(1136 initialize-interrupts! 1133 31 ())
(1137 with-interrupts-inhibited 1133 74 (#(4 14 #(thunk) ())))
(1138 with-interrupts-allowed 1133 78 (#(4 14 #(thunk) ())))
(1139 with-interrupts 1133 82 (#(4 22 #(interrupts thunk) (#(10 22 #(ei) ())))))
(1140 #f 1139 11 (#(5 15 #(results) ())))
(1141 enabled-interrupts 1133 86 (#(8 14 #(e) ())))
(1142 interrupt-before-heap-overflow! 1133 90 (#(5 52 #(maybe-required-space) (#(35 52 #(space) ())))))
(1143 #f 1142 42 (#(4 23 #(ei) ())))
(1145 usual-resumer 1144 1 (#(4 7 #(entry-point) ())))
(1146 #f 1145 5 (#(4 44 #(resume-arg in out) ())))
(1147 #f 1146 38 ())
(1149 start 1148 1 (#(4 7 #(structs-to-open) ())))
(1150 #f 1149 5 (#(4 11 #(structs-thunk) ())))
(1151 #f 1150 5 (#(4 23 #(arg) ())))
(1152 #f 1151 9 (#(4 14 #(k) ())))
(1153 #f 1152 5 (#(4 28 #(c punt) ())))
(1154 #f 1153 21 (#(4 61 #(cont) ())))
(1155 #f 1152 8 (#(22 45 #(b) ())))
(1156 #f 1151 17 ())
(1157 make-built-in-structures 1148 5 (#(4 108 #(structs) (#(25 108 #(p) (#(72 108 #(s) ())))))))
(1158 #f 1157 77 (#(4 23 #(name+struct) ())))
(1159 initialize-interaction-environment! 1148 9 (#(4 115 #(built-in-structures) (#(21 115 #(scheme) ())))))
(1160 make-initial-package 1148 13 (#(4 75 #(built-in-structures structs-to-open) (#(54 75 #(p) ())))))
(1161 #f 1160 16 (#(4 14 #(name) ())))
(1162 make-env-for-syntax-promise 1148 17 (#(4 28 #(built-in-structures) (#(21 28 #(scheme) ())))))
(1163 #f 1162 22 ())
(1165 make-procedure-for-inline-transform 1164 1 (#(4 23 #(tem p) ())))
(1166 really-make-procedure-for-inline-transform 1164 5 (#(4 37 #(exp) (#(31 34 #(formals body) ())))))
(1167 #f 1166 32 (#(4 85 #(e r c) (#(12 85 #(args) ())))))
(1168 #f 1166 35 (#(4 28 #(e r c) ())))
(1169 extend-substitution 1164 9 (#(4 27 #(r formals args) (#(24 27 #(subs) ())))))
(1170 #f 1169 25 (#(4 40 #(name) (#(21 40 #(probe) ())))))
(1171 substitute 1164 13 (#(4 148 #(exp r) (#(19 131 #(op) (#(73 121 #(formals) ())))))))
(1172 substitute-list 1164 17 (#(4 14 #(exps r) ())))
(1173 #f 1172 5 (#(4 14 #(exp) ())))
(1174 invert-substitution-template 1164 21 (#(4 198 #(tem p) (#(31 150 #(op) (#(93 126 #(formals body) ())))))))
(1175 #f 1174 134 (#(4 14 #(tem) ())))
(1176 oplet? 1164 89 (#(4 38 #(exp) ())))
(1177 oplet->operator 1164 93 (#(4 24 #(exp) ())))
(1178 operator->oplet 1164 97 (#(4 27 #(exp) ())))
(1179 extrinsic? 1164 101 (#(4 38 #(exp) ())))
(1180 extrinsic->name 1164 105 (#(4 42 #(extrinsic p) (#(14 42 #(path) (#(18 42 #(loop##171) ())))))))
(1181 loop##171 1180 19 (#(4 126 #(path p name) (#(46 97 #(t) ())))))
(1182 name->extrinsic 1164 109 (#(4 26 #(name p) (#(8 26 #(loop##172) ())))))
(1183 loop##172 1182 9 (#(4 156 #(path name p) (#(46 100 #(x) ())))))
(1184 write-extrinsic 1164 117 (#(4 25 #(x port) (#(8 25 #(loop##173) ())))))
(1185 loop##173 1184 9 (#(4 69 #(path) ())))
(1188 make-a-package 1187 1 (#(4 32 #(opens-thunk accesses-thunk dir clauses) ())))
(1189 init-defpackage! 1187 5 (#(4 13 #(evaluator foo) ())))
(1190 loser 1187 9 (#(5 21 #(rest) ())))
(1191 make-compiler-base 1187 21 (#(13 185 #(items procs specials) ())))
(1192 #f 1191 18 (#(4 89 #(name op) (#(14 89 #(type) (#(42 89 #(temp##174) ())))))))
(1193 #f 1191 115 ())
(1194 #f 1191 118 ())
(1195 #f 1191 127 ())
(1196 #f 1191 154 (#(4 37 #(name) ())))
(1198 ensure-loaded 1197 1 (#(5 18 #(structs) ())))
(1199 #f 1198 9 (#(4 20 #(p) ())))
(1200 #f 1198 12 (#(4 14 #(stuff p) ())))
(1201 #f 1200 8 ())
(1202 #f 1201 6 ())
(1203 #f 1202 7 (#(4 23 #(filename+scanned-forms) ())))
(1205 #f 1204 1 (#(637 1078 #(the-packages) (#(1022 1073 #(the-package) ()) #(819 1007 #(the-package) ()) #(659 804 #(the-package) ())))))
(1206 #f 1205 642 (#(14 459 #(the-package) ())))
(1212 #f 1205 855 (#(4 88 #(form rename compare) (#(66 88 #(name parts conc %define %begin %quote) (#(70 88 #(loop##175) ())))))))
(1213 conc 1212 26 (#(5 33 #(things) ())))
(1214 #f 1213 17 (#(4 20 #(thing) ())))
(1215 loop##175 1212 71 (#(4 180 #(i p r) ())))
(1216 #f 1205 956 (#(4 102 #(form rename compare) (#(51 102 #(type-name component-name %definitely-name->enumerand %quote) ())))))
(1217 #f 1205 1075 (#(420 466 #(the-package) ()) #(389 405 #(the-package) ()) #(349 374 #(the-package) ()) #(318 334 #(the-package) ()) #(14 303 #(the-package) ())))
(1218 #f 1217 50 (#(4 823 #(input##179 rename##180 compare##181) (#(12 823 #(tail##178) (#(613 820 #(id) (#(624 820 #(type) (#(641 820 #(constructor) (#(659 820 #(arg) (#(677 820 #(pred) (#(695 820 #(more) ()))))))))))) #(496 602 #(temp##176) (#(511 600 #(temp##176) (#(526 598 #(temp##176) (#(575 594 #(temp##176) ()) #(545 564 #(temp##176) ()))))))) #(130 487 #(id) (#(141 487 #(type) (#(158 487 #(constructor) (#(176 487 #(arg) (#(203 487 #(field) (#(230 487 #(field-stuff) ()))))))))))) #(21 119 #(temp##176) (#(36 117 #(temp##176) (#(51 115 #(temp##176) (#(96 111 #(loop) ()) #(70 89 #(temp##176) ())))))))))))))
(1219 loop 1218 97 (#(4 62 #(l) (#(13 62 #(temp##177) (#(40 45 #(temp##176) ())))))))
(1220 #f 1218 181 (#(4 10 #(temp##176) ())))
(1221 #f 1218 208 (#(4 10 #(temp##176) ())))
(1222 #f 1218 453 (#(4 13 #(field field-stuff) ())))
(1223 #f 1217 91 (#(4 70 #(e r c) (#(48 70 #(%define-accessor %begin type field-specs) (#(52 70 #(loop##182) ())))))))
(1224 loop##182 1223 53 (#(4 69 #(i field-specs ds) ())))
(1225 #f 1217 132 (#(4 651 #(input##185 rename##186 compare##187) (#(12 651 #(tail##184) (#(343 648 #(type) (#(354 648 #(index) (#(368 648 #(field) (#(386 648 #(accessor) (#(407 648 #(modifier) ()))))))))) #(245 332 #(temp##183) (#(260 330 #(temp##183) (#(275 328 #(temp##183) (#(290 326 #(temp##183) (#(305 324 #(temp##183) ()))))))))) #(102 236 #(type) (#(113 236 #(index) (#(127 236 #(field) (#(145 236 #(accessor) ()))))))) #(21 91 #(temp##183) (#(36 89 #(temp##183) (#(51 87 #(temp##183) (#(66 85 #(temp##183) ())))))))))))))
(1227 #f 1217 468 (#(169 450 #(the-package) ()) #(138 154 #(the-package) ()) #(107 123 #(the-package) ()) #(76 92 #(the-package) ()) #(45 61 #(the-package) ()) #(14 30 #(the-package) ())))
(1228 #f 1227 452 (#(76 293 #(the-package) ()) #(45 61 #(the-package) ()) #(14 30 #(the-package) ())))
(1229 #f 1228 295 (#(227 469 #(the-package) ()) #(196 212 #(the-package) ()) #(45 181 #(the-package) ()) #(14 30 #(the-package) ())))
(1230 #f 1229 471 (#(229 395 #(the-package) ()) #(198 214 #(the-package) ()) #(159 175 #(the-package) ()) #(128 144 #(the-package) ()) #(53 113 #(the-package) ()) #(14 30 #(the-package) ())))
(1231 #f 1230 36 (#(14 445 #(the-package) ())))
(1249 #f 1230 181 (#(14 304 #(the-package) ())))
(1251 #f 1230 397 (#(303 462 #(the-package) ()) #(228 288 #(the-package) ()) #(197 213 #(the-package) ()) #(166 182 #(the-package) ()) #(45 151 #(the-package) ()) #(14 30 #(the-package) ())))
-
